<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HttpClient</title>
      <link href="/2024/04/26/HttpClient/"/>
      <url>/2024/04/26/HttpClient/</url>
      
        <content type="html"><![CDATA[<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>HttpClient 是Apache Jakarta Common下的子项目，可以用来提供高效的，最新的，功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。</p><p>在Java中可以通过HttpClient工具包编造Http请求和发送Http请求。</p><p>导入Maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心API：</p><ul><li>HttpClient</li><li>HttpClients</li><li>CloseableHttpClient</li><li>HttpGet</li><li>HttpPost</li></ul><p>发送请求步骤：</p><ul><li>创建HttpClient对象</li><li>创建Http请求对象</li><li>调用HttpClient的execute方法发送请求</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/04/25/Redis/"/>
      <url>/2024/04/25/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><p>Redis是一种基于<strong>内存</strong>的 key-value 结构数据库。</p><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品，资讯，新闻）</li><li>企业应用广泛</li></ul><p>官网：<a href="https://redis.io/">https://redis.io</a></p><p>中文网站：<a href="https://www.redis.net.cn/">https://www.redis.net.cn</a></p><ol><li>启动Redis:在根目录下打开cmd，执行 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li><li>连接Redis:在根目录另行打开cmd，执行 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe</span><br><span class="line">或者</span><br><span class="line">redis-cli.exe -h &quot;ip地址&quot; -p “端口号”</span><br><span class="line">如果有密码</span><br><span class="line">redis-cli.exe -h &quot;ip地址&quot; -p “端口号” -a “密码”</span><br></pre></td></tr></table></figure></li><li>也可以使用图形化工具连接Redis</li></ol><h3 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h3><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p><ol><li>字符串string<ul><li>普通字符串，Redis种最简单的数据类型</li></ul></li><li>哈希 hash<ul><li>也叫散列，类似于java中的HashMap结构</li></ul></li><li>列表 list<ul><li>按照插入的顺序排序，可以有重复元素，类似于Java中的LinkedList</li></ul></li><li>集合 set<ul><li>无序集合，没有重复元素，类似于Java中的HashSet</li></ul></li><li>有序集合 sorted set &#x2F; zset<ul><li>有序集合（sorted set &#x2F; zset）：集合中每个元素关联一个分数（score），根据分数升序排序，没有重复元素</li></ul></li></ol><h3 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h3><ol><li>Redis 字符串类型常用命令：<ul><li>SET key value （设置指定key的值）</li><li>GET key （获取指定key的值）</li><li>SETEX key seconds value （设置指定key的值，并将key的过期时间设为seconds秒）</li><li>SETNX key value （只有在key不存在时设置key的值）</li></ul></li><li>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象，常用命令：<ul><li>HSET key field value （将哈希表key中的字段field的值设为value）</li><li>HGET key field （获取储存在哈希表中的指定字段的值）</li><li>HDEL key field （删除储存在哈希表中的指定字段）</li><li>HKEYS key （获取哈希表中所有字段）</li><li>HVALS key （获取哈希表中所有的值）</li></ul></li><li>Redis 列表是简单的字符串列表，按照插入顺序排序，常用命令：<ul><li>LPUSH key value1 [value2] （将一个或多个值插入到列表头部）</li><li>LRANGE key start stop （获取列表指定范围内的元素，0是头部，-1是尾部）</li><li>RPOP key （移除并获取列表最后一个元素）</li><li>LLEN key （获取列表长度）</li></ul></li><li>Redis set 是string类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据，常用命令：<ul><li>SADD key member1 [member2] （向集合添加一个或多个成员）</li><li>SMEMBERS key （返回集合中的所有成员）</li><li>SCARD key （获取集合的成员数）</li><li>SINTER key1 [key2] （返回给定所有集合的交集）</li><li>SUNION key1 [key2] （返回所有给定集合的并集）</li><li>SREM key member1 [member2] （删除集合中一个或多个成员）</li></ul></li><li>Redis 有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数。常用命令：<ul><li>ZADD key score1 member1 [score2 member2] （向有序集合添加一个或多个成员）</li><li>ZRANGE key start stop [WITHSCORES] （通过索引区间返回有序集合中指定区间内的成员）</li><li>ZINCRBY key increment member （有序集合中对指定成员的分数加上增量 increment）</li><li>ZREM key member [member …] （移除有序集合中的一个或多个成员）</li></ul></li><li>Redis的通用命令是不分数据类型的，都可以使用的命令：<ul><li>KEYS pattern （查找所有符合给定模式(pattern)的key）</li><li>EXISTS key （检查给定key是否存在）</li><li>TYPE key （返回key所储存的值的类型）</li><li>DEL key （该命令用于在key存在时删除key）</li></ul></li></ol><h3 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h3><h4 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h4><p>Redis的Java客户端很多，常用的几种：</p><ul><li>Jedis</li><li>Lettuce</li><li>Spring Data Redis</li></ul><p>Spring Data Redis 是Spring的一部分，对Redis底层开发包进行了高度封装。<br>在Spring项目中，可以使用Spring Data Redis来简化操作。</p><h4 id="Spring-Data-Redis使用方式"><a href="#Spring-Data-Redis使用方式" class="headerlink" title="Spring Data Redis使用方式"></a>Spring Data Redis使用方式</h4><p>操作步骤：</p><ol><li>导入Spring Data Redis 的maven坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置Redis数据源<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li>编写配置类，创建RedisTemplate对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">         log.info(<span class="string">&quot;开始创建redis模板类......&quot;</span>);</span><br><span class="line">         <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">         <span class="comment">//设置Key的序列化器，默认为JdkSerializationRedisSerializer</span></span><br><span class="line">         redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">         <span class="comment">//设置redis的连接工厂对象</span></span><br><span class="line">         redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">         <span class="keyword">return</span> redisTemplate;</span><br><span class="line">     &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过RedisTemplate对象操作Redis<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataRedisTest</span> &#123; </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(redisTemplate);</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">        <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作字符串类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//set get setex setnx</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;威海&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">        System.out.println(city);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">        redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;c9&quot;</span>,<span class="string">&quot;hit&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;c9&quot;</span>,<span class="string">&quot;hitwh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作哈希类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//hset hget hdel hkeys hvals</span></span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">        hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;vansherry&quot;</span>);</span><br><span class="line">        hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(values);</span><br><span class="line"></span><br><span class="line">        hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//lpush lrange rpop llen</span></span><br><span class="line">        <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">        listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">        listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//sadd smember scard sinter sunion srem</span></span><br><span class="line">        <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">        setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">        System.out.println(members);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">interset</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">        System.out.println(interset);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">        System.out.println(union);</span><br><span class="line"></span><br><span class="line">        setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作有序集合类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//zadd zrange zincrby zrem</span></span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">        zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用命令操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//keys exists type del</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object key : keys)&#123;</span><br><span class="line">            <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">            System.out.println(type.name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2024/04/22/LC/"/>
      <url>/2024/04/22/LC/</url>
      
        <content type="html"><![CDATA[<h1 id="Java算法题"><a href="#Java算法题" class="headerlink" title="Java算法题"></a>Java算法题</h1><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>出现重复数据统计数量时，可以使用HashMap以键值对的形式储存，数据为键，个数为值。</p><p>当两个键重复时，后一个键中的值会覆盖掉前一个键中的值。</p><p>常用的方法有：</p><ul><li>put()</li><li>size()</li><li>get()</li><li>containsKey()</li></ul><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections工具类提供了大量操作<strong>集合</strong>(List,Map,Set等)的<strong>静态方法</strong>。</p><p>如果操作的集合或者对象是null，则抛出 <em><strong>NullPointerException</strong></em> 异常。</p><p>常用的方法：</p><ul><li>static void sort(List list) 根据元素的自然顺序 对指定列表按升序进行排序</li><li>static void sort(List list, Comparator c)  根据指定比较器产生的顺序对指定列表进行排序</li><li>static void reverse(List list) 反转列表中元素的顺序</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>常用的方法：</p><ul><li>substring(int beginIndex, int endIndex)返回一个在这两个索引之间的字符串</li></ul><h3 id="判断集合为空不能用-null"><a href="#判断集合为空不能用-null" class="headerlink" title="判断集合为空不能用 !&#x3D; null"></a>判断集合为空不能用 !&#x3D; null</h3><p>判断集合里面是否有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArraryList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接用 !&#x3D; null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArraryList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;T&gt; <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该使用 .isEmpty()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArraryList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;T&gt; <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因如下：</p><ul><li>使用 list !&#x3D; null 只能确保集合对象本身不是 null，但无法保证集合内部没有空指针异常。</li><li>如果集合为 null，调用 isEmpty() 方法会导致 <em><strong>NullPointerException</strong></em>，但通常情况下，我们会先检查集合是否为 null，然后再使用 isEmpty() 方法。</li></ul><p>安全形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArraryList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;T&gt; <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; !list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些小坑</title>
      <link href="/2024/04/20/keng/"/>
      <url>/2024/04/20/keng/</url>
      
        <content type="html"><![CDATA[<h1 id="开发过程中遇到的一些小坑"><a href="#开发过程中遇到的一些小坑" class="headerlink" title="开发过程中遇到的一些小坑"></a>开发过程中遇到的一些小坑</h1><h3 id="80端口显示Internet-Information-Service"><a href="#80端口显示Internet-Information-Service" class="headerlink" title="80端口显示Internet Information Service"></a>80端口显示Internet Information Service</h3><p>有时候需要使用80端口，这时侯发现自己的页面没生效，而是弹出了一个多国语言的Windows蓝色页面。<br><img src="/2024/04/20/keng/img.png" alt="img,png"><br>这是因为系统自带的iis服务器把80占用了，只需要打开iis管理器把80端口关闭即可。(感谢furry学长指出原因)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅学HTML</title>
      <link href="/2024/04/19/HTML/"/>
      <url>/2024/04/19/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="浅学HTML"><a href="#浅学HTML" class="headerlink" title="浅学HTML"></a>浅学HTML</h1><p>HTML：HyperText Markup language 超文本标记语言,作用是定义网页的内容和结构。</p><ul><li>HyperText是指用超链接的方式组织网页，把网页联系起来。</li><li>Markup是指用<code>&lt;标签&gt;</code>的方式赋予内容不同的功能和含义。</li></ul><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><p>HTML由一系列元素elements组成，例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>元素还可以由属性，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello,world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>元素之间可以嵌套，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="comment">&lt;!--文档类型声明：浏览器用什么方式去读文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code>元素囊括了页面中所有其他元素，整个页面只需一个，称为根元素</li><li><code>head</code>元素包含的是那些不用于展现内容的元素</li><li><code>body</code>元素包含了对用户展现内容的元素</li></ul><h3 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h3><h4 id="文本元素"><a href="#文本元素" class="headerlink" title="文本元素"></a>文本元素</h4><ul><li>Heading  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Paragraph  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>List<ul><li>无序列表 unordered list<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>有序列表 ordered list<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>列表可以嵌套，形成多级列表</li></ul></li><li>Anchor<ul><li>锚，超链接<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果网页在本地，网页地址直接写本地html文件名，如：xxx.html</li><li>如果是互联网网页，网页地址直接写网址，如：<a href="https://vansherry.github.io/">https://vansherry.github.io/</a></li><li>如果是在该页面内跳转，网页地址写#+要跳转的元素id，如：#p1</li><li>带#的都表示在本页面跳转，单独的#是跳转到页面最上方</li></ul></li></ul><h4 id="多媒体元素"><a href="#多媒体元素" class="headerlink" title="多媒体元素"></a>多媒体元素</h4><ul><li>Image<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>src格式有3种<ul><li>文件地址</li><li>data URL(图片二进制数据)<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">data:媒体类型;<span class="title">base64</span>,数据</span></span><br></pre></td></tr></table></figure></li><li>object URL,需要配合javascript使用</li></ul></li><li>Video<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Audio<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--表单项--&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有<ul><li>get (默认)提交时，数据跟在URL地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定数据的格式<ul><li>application&#x2F;x-www-form-urlencoded (默认)</li><li>multipart&#x2F;form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有name属性的表单项数据，才会被发送给服务器</li></ul></li></ul><p>常见的表单项</p><ul><li>文本框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>密码框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>隐藏框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>日期框<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>单选<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--checked表示默认选中--&gt;</span></span><br></pre></td></tr></table></figure></li><li>多选<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用数组或集合接收--&gt;</span></span><br></pre></td></tr></table></figure></li><li>文件上传<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用MultipartFile接收--&gt;</span></span><br></pre></td></tr></table></figure>注意：此时表单元素中的属性必须为 method&#x3D;”post” enctype&#x3D;”multipart&#x2F;form-data” 才能获得文件里面的数据，否则只会获得文件的名字</li></ul><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>请求由三部分组成</p><ol><li>请求行</li></ol><ul><li>请求方式,URL,协议版本</li></ul><ol start="2"><li>请求头</li><li>请求体<br>get 请求示例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二次技术分享会</title>
      <link href="/2024/04/02/conference2/"/>
      <url>/2024/04/02/conference2/</url>
      
        <content type="html"><![CDATA[<h1 id="第二次技术分享会"><a href="#第二次技术分享会" class="headerlink" title="第二次技术分享会"></a>第二次技术分享会</h1><h2 id="RequiredArgsConstructor-onConstructor-Autowired"><a href="#RequiredArgsConstructor-onConstructor-Autowired" class="headerlink" title="@RequiredArgsConstructor(onConstructor_ &#x3D; {@Autowired})"></a>@RequiredArgsConstructor(onConstructor_ &#x3D; {@Autowired})</h2><p>在类上添加@RequiredArgsConstructor(onConstructor_ &#x3D; {@Autowired})注解代替方法上的注解@Autowired进行自动注入，避免@Autowired注解的重复使用，<br>在声明对象时，要加final。</p><h2 id="request和response封装"><a href="#request和response封装" class="headerlink" title="request和response封装"></a>request和response封装</h2><p>通过request和response封装可以接收和发送json形式的参数，可以提供统一的接口，提高代码可读性，减少controller层代码的复杂性。</p><ol><li>封装 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class XXXRequest &#123;</span><br><span class="line">  @NotNull</span><br><span class="line">  private String xxx1;</span><br><span class="line">  @NotNull</span><br><span class="line">  private int xxx2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@@RestController</span><br><span class="line">@RequiredArgsConstructor(onConstructor_ = &#123;@Autowired&#125;)</span><br><span class="line">public class XXXController &#123;</span><br><span class="line">  </span><br><span class="line">  private final XXXService xxxService;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value = <span class="string">&quot;/xxx/xxx&quot;</span>,method = RequestMethod.POST)</span><br><span class="line">  public CommonResult&lt;String&gt; xxx(@RequestBody XXXrequest request)&#123;</span><br><span class="line">        <span class="built_in">return</span> xxxService.xxx(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Validation参数校验"><a href="#Validation参数校验" class="headerlink" title="Validation参数校验"></a>Validation参数校验</h2><p>Validation 是用于检查程序代码中参数的有效性的框架，作为 Spring 框架中的一个参数校验工具，集成在 spring-context 包中。</p><p>Validation 包含了众多的注解来帮助对Java程序不同类型的参数进行校验，校验相关注解分布在spring-boot-starter-validation 依赖的 javax.validation.constraints 包中。</p><ul><li>@Null&#x2F;@NotNull，标注的字段必须为null&#x2F;必须不为null</li><li>@AssertFalse&#x2F;@AssertTrue，标注字段可以为null，但不为null时必须为false&#x2F;true</li><li>@Email，标注的字段对应值必须为email格式</li><li>@URL，标注的字段值必须是URL</li><li>@Patten，标注的字段值必须符合定义的正则表达式</li></ul><h2 id="Swagger3"><a href="#Swagger3" class="headerlink" title="Swagger3"></a>Swagger3</h2><ol><li>引入依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>配置application.yml文件（其实不配置也行）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"><span class="comment"># 配置swagger文档的访问路径</span></span><br><span class="line">springdoc:</span><br><span class="line">  swagger-ui:</span><br><span class="line">    path: /swagger-ui.html</span><br></pre></td></tr></table></figure></li><li>编写swagger配置类SwaggerConfig<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">   @Bean</span><br><span class="line">   public OpenAPI <span class="function"><span class="title">springShopOpenAPI</span></span>() &#123;</span><br><span class="line">   <span class="built_in">return</span> new OpenAPI()</span><br><span class="line">   .info(new Info().title(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line">   .description(<span class="string">&quot;我的API文档&quot;</span>)</span><br><span class="line">   .version(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">   .license(new License().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">   .externalDocs(new ExternalDocumentation()</span><br><span class="line">   .description(<span class="string">&quot;外部文档&quot;</span>)</span><br><span class="line">   .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注解使用<br><img src="/2024/04/02/conference2/img.png" alt="img.png"></li></ol><h2 id="PostgreSQL自定义函数"><a href="#PostgreSQL自定义函数" class="headerlink" title="PostgreSQL自定义函数"></a>PostgreSQL自定义函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION 函数名(</span><br><span class="line">    IN xxx int8,</span><br><span class="line">    -- 输入参数</span><br><span class="line">    OUT xxxx varchar,</span><br><span class="line">    -- 输出参数</span><br><span class="line">) RETURNS SETOF pg_catalog.record AS $BODY$</span><br><span class="line">DECLARE</span><br><span class="line">    -- 在这里声明变量,如果需要的话</span><br><span class="line">BEGIN</span><br><span class="line">    -- 在这里编写你的逻辑</span><br><span class="line">    </span><br><span class="line">    -- 使用 RETURN NEXT 返回一行结果</span><br><span class="line">    -- 例如:</span><br><span class="line">    RETURN NEXT;</span><br><span class="line">    </span><br><span class="line">    -- 通过循环遍历你的数据,根据需要返回多行结果</span><br><span class="line">    -- 例如:</span><br><span class="line">    -- FOR row IN</span><br><span class="line">    --     SELECT col1, col2, col3</span><br><span class="line">    --     FROM your_table</span><br><span class="line">    -- LOOP</span><br><span class="line">    --     RETURN NEXT row;</span><br><span class="line">    -- END LOOP;</span><br><span class="line"></span><br><span class="line">    -- 返回 null 表示结果集结束</span><br><span class="line">    RETURN;</span><br><span class="line">END;</span><br><span class="line">$BODY$ LANGUAGE plpgsql;</span><br></pre></td></tr></table></figure><ul><li>CREATE OR REPLACE FUNCTION：这是 PostgreSQL 中用来创建或者替换函数的语法。如果函数已经存在，使用 CREATE OR REPLACE FUNCTION 会先尝试删除已存在的同名函数，然后再创建新的函数。<br>函数名：这是你要创建的函数的名称。</li><li>(IN xxx int8, OUT xxxx varchar)：这是函数的参数列表。IN 表示输入参数，OUT 表示输出参数。在这个例子中，函数接收一个名为 xxx 的整数输入参数，并返回一个名为 xxxx 的字符串输出参数。</li><li>RETURNS SETOF pg_catalog.record：这个函数返回一个结果集，其中的每一行都由 pg_catalog.record 类型定义。SETOF 表示返回多行结果。</li><li>AS $BODY$：这个部分标志着函数的实现体的开始。</li><li>DECLARE：在这里可以声明局部变量。</li><li>BEGIN：标志着函数的实际逻辑的开始。</li><li>RETURN NEXT;：这个语句用于返回结果集的下一行。你需要在函数的逻辑中调用 RETURN NEXT 来返回每一行结果。</li><li>RETURN;：当函数逻辑结束时，使用 RETURN; 来表示结果集的结束。</li></ul><h2 id="从web网页查找对应controller方法的方法"><a href="#从web网页查找对应controller方法的方法" class="headerlink" title="从web网页查找对应controller方法的方法"></a>从web网页查找对应controller方法的方法</h2><p>在web页面打开F12,网络里的Fetch&#x2F;XHR那一栏<br><img src="/2024/04/02/conference2/img_1.png" alt="img_1.png"><br>复制名称，或者查看请求url，在idea搜索关键字就好了，负载和响应等信息都可以查看，非常实用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架</title>
      <link href="/2024/03/27/ssm/"/>
      <url>/2024/03/27/ssm/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架学习"><a href="#SSM框架学习" class="headerlink" title="SSM框架学习"></a>SSM框架学习</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>官网：spring.io</p><h3 id="Spring-Framework系统架构"><a href="#Spring-Framework系统架构" class="headerlink" title="Spring Framework系统架构"></a>Spring Framework系统架构</h3><ul><li>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基</li></ul><p><img src="/2024/03/27/ssm/img.png" alt="Spring Framework系统架构图"></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="IoC-Inversion-of-Control-控制反转"><a href="#IoC-Inversion-of-Control-控制反转" class="headerlink" title="IoC(Inversion of Control)控制反转"></a>IoC(Inversion of Control)控制反转</h4><ul><li>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，这种思想称之为控制反转。</li></ul><h4 id="Spring技术对IoC思想进行了实现"><a href="#Spring技术对IoC思想进行了实现" class="headerlink" title="Spring技术对IoC思想进行了实现"></a>Spring技术对IoC思想进行了实现</h4><ul><li>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的“外部”。</li><li>IoC容器负责对象的创建，初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean。</li></ul><h4 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI(Dependency Injection)依赖注入"></a>DI(Dependency Injection)依赖注入</h4><ul><li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入。</li></ul><p>目标：充分解耦</p><ul><li>使用IoC容器管理bean(IoC)。</li><li>在IoC容器中将由依赖关系的bean进行关系绑定(DI)。</li></ul><p>最终效果</p><ul><li>使用对象时不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系。</li></ul><h3 id="IoC使用-XML"><a href="#IoC使用-XML" class="headerlink" title="IoC使用(XML)"></a>IoC使用(XML)</h3><ol><li>导入Spring坐标 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-context&lt;/artfactId&gt;</span><br><span class="line">  &lt;version&gt;5.2.10.RELLEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>定义Spring管理的类</li><li>创建Spring配置文件，配置对于类作为Spring管理的bean <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans ......&gt;</span><br><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">&quot;名称1&quot;</span> class=<span class="string">&quot;类的路径1&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">&quot;名称2&quot;</span> class=<span class="string">&quot;类的路径2&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：bean定义时id属性在同一个上下文中不能重复</li></ul></li><li>初始化IoC容器(Spring核心容器&#x2F;Spring容器)，通过容器获取bean<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载配置文件得到上下文对象，也就是容器对象</span><br><span class="line">ApplicationContext <span class="string">&quot;xxx&quot;</span> = new ClassPathXmlApplicationContext(<span class="string">&quot;xxx.xml&quot;</span>)</span><br><span class="line">//获取资源</span><br><span class="line">ObjectName obj = (ObjectName) xxx.getBean(<span class="string">&quot;id名称&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="DI使用-XML"><a href="#DI使用-XML" class="headerlink" title="DI使用(XML)"></a>DI使用(XML)</h3><ol><li>删除使用new形式创建对象的代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private XXX xxx = new XXX();</span><br><span class="line">//改为</span><br><span class="line">private XXX xxx;</span><br></pre></td></tr></table></figure></li><li>提供依赖对象对应的setter方法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void setXXX(XXX xxx)&#123;</span><br><span class="line">   this.xxx = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置关系 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans ......&gt;</span><br><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">&quot;名称1&quot;</span> class=<span class="string">&quot;类的路径1&quot;</span>&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;&#x27;对象名&#x27; xxx&quot;</span> ref=<span class="string">&quot;名称2&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">&quot;名称2&quot;</span> class=<span class="string">&quot;类的路径2&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="bean基础配置"><a href="#bean基础配置" class="headerlink" title="bean基础配置"></a>bean基础配置</h3><p>名称： bean</p><p>类型： 标签</p><p>所属： beans标签</p><p>功能： 定义Spring核心容器管理的对象</p><ol><li>格式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line"> &lt;bean/&gt;</span><br><span class="line"> &lt;bean&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li>id: bean的id，使用容器可以通过id值获取对应的bean，在一个容器中id值唯一</li><li>class: bean的类型，即配置的bean的全路径类名</li><li>name: 定义bean的别名，可定义多个，使用逗号(,)分号(;)空格( )分隔<ul><li>注意事项：获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常NoSuchBeanDefinitionException。</li><li>NoSuchBeanDefinitionException：No bean named ‘对象名’ avaliable。</li></ul></li><li>scope: 定义bean的作用范围，可选范围如下<ul><li>singleton: 单例(默认)(即每次使用的是同一个对象)</li><li>prototype: 非单例(每次使用的是不同对象)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean <span class="built_in">id</span>=<span class="string">&quot;名称&quot;</span> name=<span class="string">&quot;别名1 别名2&quot;</span> class=<span class="string">&quot;类的路径&quot;</span> scope=<span class="string">&quot;prototype&quot;</span> /&gt;</span><br><span class="line">   &lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>适合交给容器进行管理的bean<ul><li>表现层对象</li><li>业务层对象</li><li>数据层对象</li><li>工具对象</li></ul></li><li>不适合交给容器进行管理的bean<ul><li>封装实体的域对象</li></ul></li><li>(看对象是否复用)</li></ul><h3 id="bean实例化-创建"><a href="#bean实例化-创建" class="headerlink" title="bean实例化(创建)"></a>bean实例化(创建)</h3><ol><li><p>构造方法(常用)</p><p>bean本质上就是对象，创建bean使用构造方法完成</p><ul><li>提供可访问的(无参)构造方法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class XXXImpl implements XXX&#123;</span><br><span class="line"> public <span class="function"><span class="title">XXXImpl</span></span>()&#123;</span><br><span class="line"> &#125;//可以不写</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line"> <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXImpl&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li>无参构造方法如果不存在，将抛出异常BeanCreationException</li></ul></li><li><p>静态工厂(了解)</p><ul><li>静态工厂<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class XXXFactory&#123;</span><br><span class="line"> public static XXX <span class="function"><span class="title">getxxx</span></span>()&#123;</span><br><span class="line">   <span class="built_in">return</span> new XXXImpl();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line">  <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span></span><br><span class="line">  factory-method=<span class="string">&quot;xxx(方法)&quot;</span></span><br><span class="line">  class=<span class="string">&quot;xxx.xxx.factory.XXXFactory&quot;</span></span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载配置文件得到上下文对象，也就是容器对象</span><br><span class="line">ApplicationContext xxxx = new ClassPathXmlApplicationContext(<span class="string">&quot;xxxx.xml&quot;</span>)</span><br><span class="line">//获取资源</span><br><span class="line">XXX xxx = (XXX) xxxx.getBean(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例工厂(了解)</p><ul><li>实例工厂<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class XXXFactory&#123;</span><br><span class="line"> public XXX <span class="function"><span class="title">getxxx</span></span>()&#123;</span><br><span class="line">   <span class="built_in">return</span> new XXXImpl();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxFactory&quot;</span> class=<span class="string">&quot;xxx.xxx.factory.XXXFactory&quot;</span>/&gt;//配合下面bean的使用,实际无意义</span><br><span class="line">      </span><br><span class="line">&lt;bean</span><br><span class="line">   <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span></span><br><span class="line">   factory-method=<span class="string">&quot;getXXX&quot;</span>//方法名不固定,每次需要配置</span><br><span class="line">   factory-bean=<span class="string">&quot;xxxFactory&quot;</span>//为上一个bean的<span class="built_in">id</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建实例工厂对象</span><br><span class="line">XXXFactory xxxFactory = new XXXFactory();</span><br><span class="line">//通过实例工厂对象创建对象</span><br><span class="line">XXX xxx = xxxFactory.getxxx();</span><br><span class="line">//使用对象</span><br><span class="line">xxx.方法</span><br></pre></td></tr></table></figure></li></ul></li><li><p>FactoryBean(实用)</p><p>由于上面注释中的限制，出现了FactoryBean</p><ul><li>FactoryBean<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class XXXFactoryBean implements FactoryBean&lt;XXX&gt;&#123;</span><br><span class="line">   //代替原始实例工厂中创建对象的方法</span><br><span class="line">   public XXX getObject() throws Exception &#123;</span><br><span class="line">       <span class="built_in">return</span> new XXXImpl();</span><br><span class="line">   &#125;   </span><br><span class="line">   public Class&lt;?&gt; <span class="function"><span class="title">getObjectType</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> XXX.class;</span><br><span class="line">   &#125;  </span><br><span class="line">   //配置是否为单例对象(不写默认为单例对象)</span><br><span class="line">   public bollean <span class="function"><span class="title">isSingleton</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">true</span>;//true为单例,<span class="literal">false</span>为非单例</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line">   <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span></span><br><span class="line">   class=<span class="string">&quot;xxx.xxx.factory.XXXFactoryBean&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载配置文件得到上下文对象，也就是容器对象</span><br><span class="line">ApplicationContext xxxx = new ClassPathXmlApplicationContext(<span class="string">&quot;xxxx.xml&quot;</span>)</span><br><span class="line">//获取资源</span><br><span class="line">XXX xxx = (XXX) xxxx.getBean(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><ul><li>生命周期：从创建到消亡的完整过程</li><li>bean生命周期：bean从创建到销毁的整体过程</li><li>bean生命周期控制：在bean创建后到销毁前做一些事情</li></ul><h4 id="bean生命周期控制"><a href="#bean生命周期控制" class="headerlink" title="bean生命周期控制"></a>bean生命周期控制</h4><ol><li>普通控制<ul><li>提供生命周期控制方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class XXXImpl implements XXX&#123;</span><br><span class="line">   public void 方法<span class="function"><span class="title">1</span></span>() &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   public void 方法<span class="function"><span class="title">2</span></span>() &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   //初始化时执行(init)</span><br><span class="line">   public void 方法<span class="function"><span class="title">3</span></span>() &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   //销毁前执行(destory)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置生命周期控制方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span> class=<span class="string">&quot;xxx.xxx.impl.XXXImpl&quot;</span> init-method=<span class="string">&quot;方法2&quot;</span> destory-method=<span class="string">&quot;方法3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>接口控制<ul><li>实现InitializingBean,DisposableBean接口 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class XXXImpl implements XXX,InitializingBean,DisposableBean&#123;</span><br><span class="line">   public void 方法<span class="function"><span class="title">1</span></span>() &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   //初始化时执行(init)</span><br><span class="line">   public void destory() throws Exception&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   //销毁前执行(destory)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置生命周期控制方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxx&quot;</span> class=<span class="string">&quot;xxx.xxx.impl.XXXImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>运行方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//加载配置文件得到上下文对象，也就是容器对象</span><br><span class="line">ClassPathXmlApplicationContext xxxx = new ClassPathXmlApplicationContext(<span class="string">&quot;xxxx.xml&quot;</span>)</span><br><span class="line">//获取资源</span><br><span class="line">XXX xxx = (XXX) xxxx.getBean(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">//关闭容器，否则虚拟机会先关闭，bean销毁前方法不会施行</span><br><span class="line">xxxx.close();//暴力关闭容器，放在最后，否则之后的方法找不到容器</span><br><span class="line">xxxx.registerShutdownHook();//关闭钩子，可以放在任意位置</span><br><span class="line">//两种方式选一个就好了，做web应用的时候都不需要写，关闭容器伴随tomcat一起</span><br></pre></td></tr></table></figure></li><li>bean生命周期经历阶段<ul><li>初始化容器<ol><li>创建对象(内存分配)</li><li>执行构造方法</li><li>执行属性注入(set操作)</li><li>执行bean初始化方法</li></ol></li><li>使用bean<ol><li>执行业务操作</li></ol></li><li>关闭&#x2F;销毁容器<ol><li>执行bean销毁方法</li></ol></li></ul></li><li>bean销毁时机<ul><li>容器关闭前触发bean的销毁</li><li>关闭容器方式：<ol><li>手工关闭容器<br>  ConfigurableApplicationContext接口close()操作</li><li>注册关闭构子，在虚拟机推出前先关闭容器再退出虚拟机<br>  ConfigurableApplicationContext接口registerShutdownHook()操作</li></ol></li></ul></li></ol><h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><h4 id="setter注入—-引用类型"><a href="#setter注入—-引用类型" class="headerlink" title="setter注入—-引用类型"></a>setter注入—-引用类型</h4><ol><li>在bean中定义引用类型属性并提供可访问的set方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class XXXServiceImpl implements XXXService&#123;</span><br><span class="line">  private XXXDao xxxDao;</span><br><span class="line">  public void setXXXDao(XXXDao xxxdao)&#123;</span><br><span class="line">    this.xxxDao = xxxDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置中使用property标签ref属性注入引用类型对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxService&quot;</span> class=<span class="string">&quot;xxx.xxx.service.impl.XXXServiceImpl&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;xxxDao&quot;</span> ref=<span class="string">&quot;xxxDao&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="setter注入—-简单类型"><a href="#setter注入—-简单类型" class="headerlink" title="setter注入—-简单类型"></a>setter注入—-简单类型</h4><ol><li>在bean中定义引用类型属性并提供可访问的set方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class XXXDaoImpl implements XXXDao&#123;</span><br><span class="line">  private int connectionNumber;</span><br><span class="line">  public void setConnectionNumber(int connectionNumber)&#123;</span><br><span class="line">    this.connectionNumber = connectionNumber;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置中使用property标签value属性注入简单类型数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;connectionNumber&quot;</span> value=<span class="string">&quot;10&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="构造器注入—-引用类型"><a href="#构造器注入—-引用类型" class="headerlink" title="构造器注入—-引用类型"></a>构造器注入—-引用类型</h4><ol><li>在bean中定义引用类型属性并提供可访问的构造方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class XXXServiceImpl implements XXXService&#123;</span><br><span class="line">  private XXXDao xxxDao;</span><br><span class="line">  public void setXXXDao(XXXDao xxxdao)&#123;</span><br><span class="line">    this.xxxDao = xxxDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置中使用constructor-arg标签ref属性注入引用类型对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxService&quot;</span> class=<span class="string">&quot;xxx.xxx.service.impl.XXXServiceImpl&quot;</span>&gt;</span><br><span class="line">  &lt;constructor-arg name=<span class="string">&quot;xxxDao&quot;</span> ref=<span class="string">&quot;xxxDao&quot;</span>/&gt;//这里的name是型参名,导致耦合度较高</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="构造器注入—-简单类型"><a href="#构造器注入—-简单类型" class="headerlink" title="构造器注入—-简单类型"></a>构造器注入—-简单类型</h4><ol><li>在bean中定义引用类型属性并提供可访问的set方法 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class XXXDaoImpl implements XXXDao&#123;</span><br><span class="line">  private int connectionNumber;</span><br><span class="line">  public void setConnectionNumber(int connectionNumber)&#123;</span><br><span class="line">    this.connectionNumber = connectionNumber;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置中使用constructor-arg标签value属性注入简单类型数据 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>&gt;</span><br><span class="line">  &lt;constructor-arg name=<span class="string">&quot;connectionNumber&quot;</span> value=<span class="string">&quot;10&quot;</span>/&gt;//这里的name是型参名,导致耦合度较高</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure> 为了防止耦合度较高，提供了两种可替代方案实现解耦合<ul><li>配置中使用constructor-arg标签type属性设置按形参类型注入 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>&gt;</span><br><span class="line">  &lt;constructor-arg <span class="built_in">type</span>=<span class="string">&quot;int&quot;</span> value=<span class="string">&quot;10&quot;</span>/&gt;</span><br><span class="line">  &lt;constructor-arg <span class="built_in">type</span>=<span class="string">&quot;java.lang.String&quot;</span> value=<span class="string">&quot;VanSherry&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>但如果形参里有两个相同类型的参数，就无法使用，因此还有一种方案</li><li>配置中使用constructor-arg标签index属性设置按形参位置注入 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>&gt;</span><br><span class="line">  &lt;constructor-arg index=<span class="string">&quot;0&quot;</span> value=<span class="string">&quot;10&quot;</span>/&gt;</span><br><span class="line">  &lt;constructor-arg index=<span class="string">&quot;1&quot;</span> value=<span class="string">&quot;VanSherry&quot;</span>/&gt;</span><br><span class="line">  //与形参中变量的顺序对应</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="依赖注入方式选择"><a href="#依赖注入方式选择" class="headerlink" title="依赖注入方式选择"></a>依赖注入方式选择</h4><ol><li>强制依赖(bean执行必须要的东西)使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</li><li>可选依赖使用setter注入进行，灵活性强</li><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li><li>实际开发构成中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li><li>自己开发的模块推荐使用setter注入</li></ol><h3 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h3><p>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</p><p>自动装配方式</p><ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><p>配置中使用bean标签autowire属性设置自动装配的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxDao&quot;</span> class=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;xxxService&quot;</span> class=<span class="string">&quot;xxx.xxx.service.impl.XXXServiceImpl&quot;</span> autowire=<span class="string">&quot;byType&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>依赖自动装配特征</p><ul><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时(byType)必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时(byName)必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先及低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ul><h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3><ul><li>注入数组对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;array&quot;</span>&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">    &lt;value&gt;100&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;200&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;300&lt;/value&gt;</span><br><span class="line">  &lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>注入List对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;list&gt;</span><br><span class="line">    &lt;value&gt;xxx1&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;xxx2&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;xxx3&lt;/value&gt;</span><br><span class="line">  &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>注入Set对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;set&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">set</span>&gt;</span><br><span class="line">    &lt;value&gt;xxx1&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;xxx2&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;xxx3&lt;/value&gt;</span><br><span class="line">  &lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>注入Map对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;XXX1&quot;</span> value=<span class="string">&quot;xxx1&quot;</span>/&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;XXX2&quot;</span> value=<span class="string">&quot;xxx2&quot;</span>/&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;XXX3&quot;</span> value=<span class="string">&quot;xxx3&quot;</span>/&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>注入Properties对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">  &lt;props&gt;</span><br><span class="line">    &lt;prop key=<span class="string">&quot;XXX1&quot;</span>&gt;xxx1&lt;/prop&gt;</span><br><span class="line">    &lt;prop key=<span class="string">&quot;XXX2&quot;</span>&gt;xxx1&lt;/prop&gt;</span><br><span class="line">    &lt;prop key=<span class="string">&quot;XXX3&quot;</span>&gt;xxx1&lt;/prop&gt;</span><br><span class="line">  &lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h3><ul><li>开启context命名空间<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmls:xsi=<span class="string">&quot;http://www.w3.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beams</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li>使用context命名空间，加载指定properties文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>使用${}读取加载的属性值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;jdbc.username&#125;</span>&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>不加载系统属性<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;jdbc.properties&quot;</span> system-properties-mode=<span class="string">&quot;NEVER&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>加载多个properties文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;jdbc.properties,msg.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>加载所有properties文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;*.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>加载properties文件标准模式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>从类路径或jar包中搜索并加载properties文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol><li>创建容器<ul><li>加载类路径下的配置文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext xxx = new ClassPathXmlApplicationContext(<span class="string">&quot;xml文件路径&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>从文件系统下加载配置文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext xxx = new FileSystemXmlApplicationContext(<span class="string">&quot;xml文件绝对路径D:\\......&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>加载多个配置文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext xxx = new ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>,<span class="string">&quot;bean2.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li>获取bean<ul><li>使用bean名称获取 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXDao xxxDao = (XXXDao) xxx.getBean(<span class="string">&quot;xxxDao&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>使用bean名称获取并指定类型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXDao xxxDao = xxx.getBean(<span class="string">&quot;xxxDao&quot;</span>,XXXDao.class);</span><br></pre></td></tr></table></figure></li><li>使用bean类型获取 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXDao xxxDao = xxx.getBean(XXXDao.class);//这种形式,容器中这个类型的bean只能有一个</span><br></pre></td></tr></table></figure> ApplicationContext最顶层接口是BeanFactory，从spring1.0就已经存在。</li></ul></li><li>BeanFactory <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassRathResource</span>(<span class="string">&quot;xml文件路径&quot;</span>);</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">xxx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resouces);</span><br><span class="line"><span class="type">XXXDao</span> <span class="variable">xxxDao</span> <span class="operator">=</span> xxx.getBean(XXXDao.class);</span><br></pre></td></tr></table></figure></li></ol><h3 id="容器相关总结"><a href="#容器相关总结" class="headerlink" title="容器相关总结"></a>容器相关总结</h3><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li>ClassPathXmlApplicationContext</li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h3 id="bean相关总结"><a href="#bean相关总结" class="headerlink" title="bean相关总结"></a>bean相关总结</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;xxxDao&quot;</span>//<span class="attr">bean的Id</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;dao xxxDaoImpl daoImpl&quot;</span>//<span class="attr">bean别名</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.dao.impl.XXXDaoImpl&quot;</span>//<span class="attr">bean类型</span>,<span class="attr">静态工厂类</span>,<span class="attr">FactoryBean类</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>//<span class="attr">控制bean的实例数量</span></span></span><br><span class="line"><span class="tag">    <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>//<span class="attr">生命周期初始化方法</span></span></span><br><span class="line"><span class="tag">    <span class="attr">destroy-method</span>=<span class="string">&quot;init&quot;</span>//<span class="attr">生命周期销毁方法</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>//<span class="attr">自动装配类型</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>//<span class="attr">bean工厂方法</span>,<span class="attr">应用于静态工厂或实例工厂</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">&quot;xxx.xxx.factory.XXXDaoFactory&quot;</span>//<span class="attr">实例工厂bean</span></span></span><br><span class="line"><span class="tag">    <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>//<span class="attr">控制bean延迟加载</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖注入相关总结"><a href="#依赖注入相关总结" class="headerlink" title="依赖注入相关总结"></a>依赖注入相关总结</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxxService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.service.impl.XXXServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">naem</span>=<span class="string">&quot;xxx1Dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;xxx1Dao&quot;</span>/&gt;</span>//构造器注入引用类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">naem</span>=<span class="string">&quot;xxx2Dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;xxx2Dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">naem</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span>//构造器注入简单类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span>//类型匹配与索引匹配</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx1Dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;xxx1Dao&quot;</span>/&gt;</span>setter注入引用类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx2Dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;xxx2Dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span>setter注入简单类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span>setter注入集合类型</span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span>//list集合</span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span>集合注入简单类型</span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span>集合注入引用类型</span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解开发定义bean"><a href="#注解开发定义bean" class="headerlink" title="注解开发定义bean"></a>注解开发定义bean</h3><ol><li>使用@Component定义bean <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;xxxDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>核心配置文件中通过组件扫描加载bean <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;xxx.xxx/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>Spring提供@Component注解的三个衍生注解<ul><li>@Controller: 用于表现层bean定义</li><li>@Service: 用于业务层bean定义</li><li>@Repository: 用于数据层bean定义</li></ul></li></ol><h3 id="纯注解开发模式"><a href="#纯注解开发模式" class="headerlink" title="纯注解开发模式"></a>纯注解开发模式</h3><p>Spring3.0升级了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</p><p>Java类代替Spring核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;xxx.xxx&quot;</span>/&gt;</span>//扫描</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被转化成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置文件中的结构转化</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx&quot;)</span><span class="comment">//扫描转化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration注解用于设定当前类为配置类<br>@ComponentScan注解用于扫描路径，此注解只能添加一次，多个数据请用数组格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;xxx.xxx.service&quot;,&quot;xxx.xxx.dao&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>读取Spirng核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">xxx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">xxx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure><h3 id="注解开发bean管理"><a href="#注解开发bean管理" class="headerlink" title="注解开发bean管理"></a>注解开发bean管理</h3><h4 id="bean作用范围"><a href="#bean作用范围" class="headerlink" title="bean作用范围"></a>bean作用范围</h4><ul><li>使用@Scope定义bean作用范围<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="bean生命周期-1"><a href="#bean生命周期-1" class="headerlink" title="bean生命周期"></a>bean生命周期</h4><ul><li>使用@PostConstruct，@ProDestroy定义bean生命周期<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XXXDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestory</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h3 id="注解开发依赖注入"><a href="#注解开发依赖注入" class="headerlink" title="注解开发依赖注入"></a>注解开发依赖注入</h3><ol><li>自动装配</li></ol><ul><li>使用@Autowired注解开启自动装配模式(按类型)  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XXXDao xxxDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xxx</span><span class="params">()</span> &#123;</span><br><span class="line">        xxxDao.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意:自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供setter方法</li><li>注意:自动装配建议使用无参构造方法创建对象(默认)，如果不提供对应构造方法，请提供唯一的构造方法</li></ul></li><li>使用@Qualifier注解开启指定名称装配bean  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;xxxDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> XXXDao xxxDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意:@Qualifier注解无法单独使用，必须配合@Autowired注解使用</li></ul></li><li>使用@Value实现简单类型注入  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Repository(&quot;xxxDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">XXXDao</span> &#123;</span><br><span class="line">  <span class="meta">@Value(&quot;100&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String connectionNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>加载properties文件</li></ol><ul><li>使用@PropertySource注解加载properties文件  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意:路径仅支持单一文件配置，多文件请使用数组格式配置，不允许使用通配符*</li></ul></li></ul><h3 id="注解开发管理第三方bean"><a href="#注解开发管理第三方bean" class="headerlink" title="注解开发管理第三方bean"></a>注解开发管理第三方bean</h3><ol><li>使用@Bean配置第三方bean <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> newDruidDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用独立的配置类管理第三方bean <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> newDruidDataSource();</span><br><span class="line">    ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">    ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    ds.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将独立的配置类加入核心配置</li></ul><ol><li>导入式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span>&#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">         <span class="comment">//相关配置</span></span><br><span class="line">         <span class="keyword">return</span> ds; </span><br><span class="line">     &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 使用@Import注解手动加入配置类到核心配置，此注解只能添加一次，多个数据请用数组格式 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>扫描式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span>&#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">         <span class="comment">//相关配置</span></span><br><span class="line">         <span class="keyword">return</span> ds; </span><br><span class="line">     &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用@ComponentScan注解扫描配置类所在的包，加载对应的配置类信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;xxx.xxx.config&quot;,&quot;xxx.xxx.service&quot;,&quot;xxx.xxx.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="注解开发实现为第三方bean注入资源"><a href="#注解开发实现为第三方bean注入资源" class="headerlink" title="注解开发实现为第三方bean注入资源"></a>注解开发实现为第三方bean注入资源</h3><ul><li>简单类型依赖注入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;123456&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> newDruidDataSource();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引用类型依赖注入  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(XXXService xxxService)</span>&#123;</span><br><span class="line">    System.out.println(xxxService);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="comment">//属性设置</span></span><br><span class="line">    <span class="keyword">return</span> ds;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象</li></ul></li></ul><h3 id="XML配置与注解配置比较"><a href="#XML配置与注解配置比较" class="headerlink" title="XML配置与注解配置比较"></a>XML配置与注解配置比较</h3><p><img src="/2024/03/27/ssm/img_1.png" alt="img_1.png"></p><h3 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h3><ul><li>pom<ul><li>org.springframework<ul><li>spring-jdbc</li></ul></li><li>org.mybatis<ul><li>mybatis-spring</li></ul></li></ul></li><li>整合MyBatis<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;xxx.xxx.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;xxx.xxx.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>1部分转化为SqlSessionFactoryBean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlsessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;xxx.xxx.domain&quot;</span>);<span class="comment">//2</span></span><br><span class="line">    ssfb.setDataSource(dataSource);<span class="comment">//3</span></span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>4部分转化为MapperScannerConfigurer<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;xxx.xxx.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring整合JUnit"><a href="#Spring整合JUnit" class="headerlink" title="Spring整合JUnit"></a>Spring整合JUnit</h3><ul><li>pom<ul><li>junit<ul><li>junit</li></ul></li><li>org.springframework<ul><li>spring-test</li></ul></li></ul></li><li>使用Spring整合JUnit专用的类加载器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XXXServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XXXService xxxService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        xxxService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h3><ul><li>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构<ul><li>OOP(Object Oriented Programming)面向对象编程</li></ul></li><li>作用:在不惊动原始设计的基础上为其进行功能增强</li><li>Spring理念:无入侵式&#x2F;无侵入式<br><img src="/2024/03/27/ssm/img_2.png" alt="img_2.png"></li><li>连接点(JoinPoint):程序执行过程中的任意位置，粒度为执行方法，抛出异常，设置变量等<ul><li>在SpringAOP中，理解为方法的执行</li></ul></li><li>切入点(Pointcut):匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以只描述一个具体的方法，也可以匹配多个方法<ul><li>一个具体方法：xxx.xxx.dao包下的XXXDao接口中的无形参返回值的save方法</li><li>匹配多个方法：所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li></ul></li><li>通知(Advice):在切入点处执行的操作，也就是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>通知类:定义通知的类</li><li>切面(Aspect):描述通知与切入点的对应关系</li></ul><ol><li>导入AOP相关坐标 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>定义接口与实现类</li><li>定义通知类，制作通知 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">     &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义切入点 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void xxx.xxx.xxx.类名。方法名())&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 说明：切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，无方法无实际逻辑</li><li>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行位置 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void xxx.xxx.xxx.类名。方法名())&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义通知类受Spring容器管理，并定义当前类为切面类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void xxx.xxx.xxx.类名。方法名())&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>开启Spring对AOP注解驱动支持 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="AOP工作流程-AOP核心概念"><a href="#AOP工作流程-AOP核心概念" class="headerlink" title="AOP工作流程&amp;&amp;AOP核心概念"></a>AOP工作流程&amp;&amp;AOP核心概念</h3><p>AOP工作流程</p><ol><li>Spring容器启动</li><li>读取所有切面配置中的切入点(被绑定的切入点，如“@Before(“pt()”)”中的切入点pt())</li><li>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点<ul><li>匹配失败，创建对象</li><li>匹配成功，创建原始对象(目标对象)的代理对象</li></ul></li><li>获取bean执行方法<ul><li>匹配失败，获取bean，调用方法并执行，完成操作</li><li>匹配成功，获取的bean是代理对象，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul></li></ol><ul><li>打印对象和代理对象时是相同的(AOP最终对toString做了重写)</li><li>打印对象和代理对象的.getClass()时，获得的是不同的</li></ul><p>AOP核心概念</p><ul><li>目标对象(Target)：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理(Proxy)：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><p>SpringAOP本质：代理模式</p><h3 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h3><ol><li>切入点：要进行增强的方法</li><li>切入点表达式：要进行增强的方法的描述方式</li><li>切入点表达式标准格式：动作关键字(访问修饰符 返回值 包名.类&#x2F;接口名.方法名(参数)异常名) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution (<span class="keyword">public</span> User demo.common.service.UserService.findById(<span class="type">int</span>))</span><br></pre></td></tr></table></figure><ul><li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>访问修饰符：public，private等，可以省略</li><li>返回值</li><li>包名</li><li>类&#x2F;接口名</li><li>方法名</li><li>参数</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul></li><li>可以使用通配符描述切入点，快速描述<ul><li>*：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execution (<span class="keyword">public</span> * demo.common.*.UserService.find*(*))</span><br><span class="line"><span class="comment">//匹配demo.common包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</span></span><br></pre></td></tr></table></figure></li><li>..：多个连续的任意符号，可以独立出现，常用于简化包名与参与的书写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execution (<span class="keyword">public</span> User demo..UserService.findById(..))</span><br><span class="line"><span class="comment">//匹配demo包下的任意包中的UserService类或接口中所有名称为findById的方法</span></span><br></pre></td></tr></table></figure></li><li>+：专用于匹配子类类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution (* *..*Service+.*(..))</span><br></pre></td></tr></table></figure></li></ul></li><li>书写技巧<ul><li>所有代码按照标准规范开发，否则以下技巧全部失效</li><li>描述切入点通常描述接口，而不描述实现类</li><li>访问控制修饰符针对接口开发均采用public描述(可省略访问控制修饰符描述)</li><li>返回值类型对应增删改查类使用精准类型加上匹配，对于查询类使用*通配快速描述</li><li>包名书写尽量不使用..匹配，效率过低，常用*做单个包描述匹配，或精准匹配</li><li>接口名&#x2F;类名书写名称与模块相关的采用* 匹配，例如UserService书写成* Service，绑定业务层接口名</li><li>方法名书写以动词进行精准匹配，名词采用* 匹配，例如getById书写成getBy *，selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常不使用异常作为匹配规则</li></ul></li></ol><h3 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h3><ol><li>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合适的位置</li><li>AOP通知共分为5种类型<ul><li>前置通知<ul><li>名称：@Before</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value(默认)：切入点方法名，格式为类名.方法名()</li></ul></li><li>后置通知<ul><li>名称：@After</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value(默认)：切入点方法名，格式为类名.方法名()</li></ul></li><li>环绕通知<ul><li>名称：@Around</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@Around注意事项<ol><li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>通知种如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</li><li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li></ol></li></ul></li><li>返回后通知<ul><li>名称：@AfterReturning</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法正常执行完毕后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value(默认)：切入点方法名，格式为类名.方法名()</li></ul></li><li>抛出异常后通知<ul><li>名称：@AfterThrowing</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value(默认)：切入点方法名，格式为类名.方法名()</li></ul></li></ul></li></ol><h3 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h3><ol><li>获取切入点方法的参数<ul><li>JoinPoint：适用于前置，后置，返回后，抛出异常后通知</li><li>ProceedJointPoint：适用于环绕通知</li></ul></li><li>获取切入带你方法返回值<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取切入点方法运行异常信息<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li><li>AOP通知获取参数数据<ul><li>JointPoint对象描述了连接点方法的运行状态，可以获取到原始方法的调用参数  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    Object[] args = jp.getArgs();</span><br><span class="line">    System.out.println(<span class="string">&quot;Arrays.toString(args)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ProceedJointPoint是JoinPoint的子类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Object[] args = pjp.getArgs();</span><br><span class="line">    System.out.println(Arrays.toString(args));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>AOP通知获取返回值数据<ul><li>返回后通知可以使用returning&#x3D;形参变量名的形式获取  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(String ret)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>+ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>环绕通知种可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>AOP通知获取异常数据<ul><li>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接收对应的异常对象  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>+ t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>抛出异常后通知可以获取切入点方法运行的异常信息，使用形参可以接收运行时抛出的异常对象  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ret = pjp.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="AOP总结"><a href="#AOP总结" class="headerlink" title="AOP总结"></a>AOP总结</h3><ul><li>概念：AOP(Aspect Oriented Programing)面向切面编程，一种编程范式</li><li>作用：在不惊动原始设计的基础上为方法进行功能增强</li><li>核心概念<ul><li>代理(Proxy):SpringAOP的核心本质是采用代理模式实现的</li><li>连接点(JoinPoint):在SpringAOP中，理解为任意方法的执行</li><li>切入点(Pointcut):匹配连接点的式子，也是具有共性功能的方法描述</li><li>通知(Advice):若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li><li>切面(Aspect):描述通知与切入点的对应关系</li><li>目标对象(Target):被代理的原始对象成为目标对象</li></ul></li></ul><h3 id="Spring事务简介"><a href="#Spring事务简介" class="headerlink" title="Spring事务简介"></a>Spring事务简介</h3><ul><li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li><li>Spring事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionExceptiom;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceTransactionManager</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>在业务层接口上添加Spring事务管理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">//也可以放在类上</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in,Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合</p><p>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务</p></li><li><p>设置事务管理器</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">DataSourceTransactionManager</span> <span class="variable">ptm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    ptm.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ptm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：事务管理器要根据实现技术进行选择</p><p>MyBatis框架使用的是JDBC事务</p></li><li><p>开启注解式事务驱动</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spring事务角色"><a href="#Spring事务角色" class="headerlink" title="Spring事务角色"></a>Spring事务角色</h3><ul><li>事务角色<ul><li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul></li></ul><p>开启Spring事务后，将多个事务变成一个，从而实现一同回滚。</p><h3 id="Spring事务属性"><a href="#Spring事务属性" class="headerlink" title="Spring事务属性"></a>Spring事务属性</h3><ol><li>事务相关配置<br><img src="/2024/03/27/ssm/img_3.png" alt="img_3.png"></li><li>事务传播行为<br><img src="/2024/03/27/ssm/img_4.png" alt="img_4.png"></li></ol><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h3><p>Spring MVC 是 Spring 框架中的一个模块，用于构建基于 Java 的 Web 应用程序。<br>它提供了一个模型-视图-控制器（Model-View-Controller，MVC）的架构，使开发人员能够更轻松地构建灵活、可维护的 Web 应用。</p><ol><li>SpringMVC概述<ul><li>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</li><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li></ul></li></ol><h3 id="SpringMVC简单使用"><a href="#SpringMVC简单使用" class="headerlink" title="SpringMVC简单使用"></a>SpringMVC简单使用</h3><ol><li>导入SpringMVC坐标与Servlet坐标 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建SpringMVC控制器类(等同于Servlet功能) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;save......&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>初始化SpringMVC环境(同Spring环境)，设定SpringMVC加载对应的bean <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springMVC容器配置</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//设置哪些请求归属springMVC处理</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载spring容器配置</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>@Controller<ul><li>类型：类注解</li><li>位置：SpringMCV控制器类定义上方</li><li>作用：设定SpringMVC的核心控制器bean</li></ul></li><li>@RequestMapping<ul><li>类型：方法注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器方法请求访问路径</li><li>相关属性：<ul><li>value(默认)：请求访问路径</li></ul></li></ul></li><li>@ResponseBody<ul><li>类型：方法注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器方法响应内容为当前返回值，无需解析</li></ul></li></ul><h3 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h3><ul><li>服务器初始化过程<ol><li>服务器启动，执行ServletContainersInitConfig类，初始化web容器</li><li>执行createServletApplicationContext方法，创建了WebApplicationContext对象</li><li>加载SpringMvcConfig</li><li>执行@ComponentScan加载对应的bean</li><li>加载UserController，每个@RequestMapping的名称对应一个具体的方法</li><li>执行getServletMappings方法，定义所有的请求都通过SpringMVC</li></ol></li></ul><h3 id="bean加载控制"><a href="#bean加载控制" class="headerlink" title="bean加载控制"></a>bean加载控制</h3><p>Contorller加载控制与业务bean加载控制</p><ul><li>SpringMVC相关bean(表现层bean)</li><li>Spring控制的bean<ul><li>业务bean(Service)</li><li>功能bean(DataSource等)</li></ul></li></ul><p>因为功能不同，为了避免Spring错误的加载到SpringMVC的bean，在加载Spring控制的bean的时候，要排除掉SpringMVC控制的bean</p><ul><li><p>SpringMVC相关bean加载控制</p><ul><li>SpringMVC加载的bean对应的包均在xxx.xxx.controller包内</li></ul></li><li><p>Spring相关bean加载控制</p><ul><li>方式一：Spring加载的bean设定扫描范围为xxx.xxx，排除掉controller包内的bean</li><li>方式二：Spring加载的bean设定扫描范围为精准范围，例如service包，dao包等</li></ul></li><li><p>@ComponentScan</p><ul><li>类型：类注解</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;xxx.xxx&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )    </span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性<ul><li>excludeFilters：排除扫描路径中加载的bean，需要指定类别(type)与具体项(classes)</li><li>includeFilters：加载指定的bean，需要指定类别(type)与具体项(classes)</li></ul></li></ul></li><li><p>bean的加载格式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//SpringMVC</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Spring</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC与Spring的bean配置看起来很繁琐，幸好AbstractDispatcherServletInitializer下面有个子类AbstractAnnotationConfigDispatcherServletInitializer可以简化他们</p></li><li><p>简化开发</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//SpringMVC</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Spring</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置请求映射路径"><a href="#设置请求映射路径" class="headerlink" title="设置请求映射路径"></a>设置请求映射路径</h3><ul><li><p>@RequestMapping</p><ul><li>类型：方法注解 类注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</li><li>范例： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">     <span class="meta">@ResponseBody</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;user......&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：<ul><li>value(默认)：请求访问路径，或访问路径前缀</li></ul></li></ul></li><li><p>Post请求中文乱码处理</p><ul><li>为web容器添加过滤器并指定字符集，Spring-web包中提供了专用的字符过滤器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">Ch</span>&#123;</span><br><span class="line">    <span class="comment">//配字符编码过滤器</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5种类型参数传递"><a href="#5种类型参数传递" class="headerlink" title="5种类型参数传递"></a>5种类型参数传递</h3><ol><li>普通参数：url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>请求参数名与形参变量名不同，使用@RequestParam绑定参数关系 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String userName,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ```   </span><br><span class="line">    - 名称：<span class="meta">@RequestParam</span></span><br><span class="line">    - 类型：形参注解</span><br><span class="line">    - 位置：SpringMVC控制器方法形参定义前面</span><br><span class="line">    - 作用：绑定请求参数与处理器方法形参间的关系</span><br><span class="line">    - 参数：</span><br><span class="line">      - required：是否为必传参数</span><br><span class="line">      - defaultValue：参数默认值</span><br><span class="line"><span class="number">2.</span> POJO参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</span><br><span class="line">    ```java</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>嵌套POJO参数：POJO对象中包含POJO对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 传入时可用address.city，address.province</li><li>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="json数据传递参数"><a href="#json数据传递参数" class="headerlink" title="json数据传递参数"></a>json数据传递参数</h3><ol><li>添加json数据转换相关坐标 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>设置发送json数据(请求body中添加json数据)</li><li>开启自动转换json数据的支持 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>@EnableWebMvc注解功能强大，改注解整合了多个功能，此处仅使用其中一部分功能，即json数据进行自动类型转换</li><li>设置接收json数据 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>@EnableWebMvc<ul><li>类型：配置类注解</li><li>位置：SpringMVC配置类定义上方</li><li>作用：开启SpringMVC多项辅助功能</li></ul></li><li>@RequestBody<ul><li>类型：形参注解</li><li>位置：SpringMVC控制器方法形参定义前面</li><li>作用：将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</li></ul></li><li>@RequestBody与@RequestParam区别<ul><li>区别<ul><li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li><li>@RequestBody用于接收json数据【application&#x2F;json】</li></ul></li><li>应用<ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li></ul></li></ul></li></ul><h3 id="日期型参数传递"><a href="#日期型参数传递" class="headerlink" title="日期型参数传递"></a>日期型参数传递</h3><ul><li>日期型数据基于系统不同格式也不尽相同<ul><li>2024-04-14</li><li>2024&#x2F;04&#x2F;14</li><li>04&#x2F;14&#x2F;2024</li></ul></li><li>接收形参时，根据不同的日期格式设置不同的接收方式  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;http://localhost/dataParam?date=2024/04/14&amp;date1=2024-04-14&amp;date2=2024/04/14 14:00:00&quot;</span></span><br></pre></td></tr></table></figure></li><li>@DateTimeFormat<ul><li>类型：形参注解</li><li>位置：SpringMVC控制器方法形参前面</li><li>作用：设定日期时间型数据格式</li><li>属性：pattern: 日期时间格式字符串</li></ul></li></ul><p>类型转换器</p><ul><li><p>Converter接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;S,T&gt; &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">convert</span><span class="params">(S var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求参数年龄数据(String-&gt;Integer)</li><li>日期格式转换(String-&gt;Date)</li></ul></li><li><p>@EnableWebMVC功能之一：根据类型匹配对应的类型转换器</p></li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><ol><li>响应页面<ul><li>将对应的页面名称按<strong>字符串</strong>return即可  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;page.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>响应数据<ul><li>文本数据  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/toText&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toText</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;response text&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ```        </span><br><span class="line">- json数据</span><br><span class="line">    ```java</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toJsonPOJO&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">toJsonPOJO</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;VanSherry&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>对象集合转json数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toJsonList&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">toJsonList</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;VanSherry1&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;VanSherry2&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">19</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">userList.add(user1);</span><br><span class="line">userList.add(user2);</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>@ResponseBody<ul><li>类型：方法注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器方法响应内容为当前返回值，无需解析</li></ul></li></ul><p>通过类型转换器：HttpMessageConverter接口转成json格式返回</p><ul><li>HttpMessageConverter接口  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line">    List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span>;</span><br><span class="line">    T <span class="title function_">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException,HttpMessageNotReadableExceotion;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T t, <span class="meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, HttpMessageNotWriteableException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h3><h4 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h4><ul><li>REST(Representational State Transfer) , 表现形式状态转换<ul><li><p>传统风格资源描述形式</p><p><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></p><p><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></p></li><li><p>REST风格描述形式</p><p><a href="http://localhost/user/1">http://localhost/user/1</a></p><p><a href="http://localhost/user">http://localhost/user</a></p></li></ul></li><li>优点：<ul><li>隐藏资源的访问行为，无法通过地址得知对资是何种操作</li><li>书写简化</li></ul></li><li>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作<ul><li><a href="http://localhost/users">http://localhost/users</a> 查询全部用户信息 GET(查询)</li><li><a href="http://localhost/users/1">http://localhost/users/1</a> 查询指定用户信息 GET(查询)</li><li><a href="http://localhost/users">http://localhost/users</a> 添加用户信息 POST(新增&#x2F;保存)</li><li><a href="http://localhost/users">http://localhost/users</a> 修改用户信息 PUT(修改&#x2F;更新)</li><li><a href="http://localhost/users">http://localhost/users</a> 删除用户信息 DELETE(删除)<br>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范。<br>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源。</li></ul></li><li>根据REST风格对资源进行访问称为RESTful</li></ul><ol><li>设定http请求动作(动词) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br></pre></td></tr></table></figure></li><li>设定请求参数(路径变量) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestMapping<ul><li>类型：方法注解</li><li>位置：SpringMVC控制器方法定义上方</li><li>作用：设置当前控制器方法请求访问路径</li><li>属性<ul><li>value(默认)：请求访问路径</li><li>method：http请求动作，标准动作(GET&#x2F;POST&#x2F;PUT&#x2F;DELETE)</li></ul></li></ul></li><li>@PathVariable<ul><li>类型：形参注解</li><li>位置：SpringMVC控制器方法形参定义前面</li><li>作用：绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</li></ul></li></ul></li></ol><ul><li>@RequestBody @RequestParam @PathVariable<ul><li>区别<ul><li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li><li>@RequestBody用于接收json数据【application&#x2F;json】</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul></li><li>应用<ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul></li></ul></li></ul><h4 id="RESTful快速开发"><a href="#RESTful快速开发" class="headerlink" title="RESTful快速开发"></a>RESTful快速开发</h4><ul><li>@RestController<ul><li>类型：类注解</li><li>位置：基于SpringMVC的RESTful开发控制器类定义上方</li><li>作用：设置当前控制器为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能</li></ul></li><li>@GetMapping @PostMapping @PutMapping @DeleteMapping<ul><li>类型：方法注解</li><li>位置：基于SpringMVC的RESTful开发控制器方法定义上方</li><li>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</li><li>属性：<ul><li>value(默认)：请求访问路径</li></ul></li></ul></li></ul><p>因为所有的请求都被SpringMVC所处理，所以需要设置对静态资源的访问放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//当访问/page/？？？？的时候，走/pages目录下的内容</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h4><p>SSM整合流程</p><ol><li>创建工程</li><li>SSM整合<ul><li>Spring<ul><li>SpringConfig</li></ul></li><li>Mybatis<ul><li>MybatisConfig</li><li>JdbcConfig</li><li>Jdbc.properties</li></ul></li><li>SpringMVC<ul><li>ServletConfig</li><li>SpringMvcConfig</li></ul></li></ul></li><li>功能模块<ul><li>表与实体类</li><li>dao(接口+自动代理)</li><li>service(接口+实现类)<ul><li>业务层接口测试(整合JUnit)</li></ul></li><li>controller<ul><li>表现层接口测试(PostMan)</li></ul></li></ul></li></ol><h4 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h4><p><img src="/2024/03/27/ssm/img_5.png" alt="img_5.png"><br>拦截器概念</p><ul><li>拦截器(Interceptor)是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li><li>作用：<ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行</li></ul></li></ul><p>拦截器与过滤器区别</p><ul><li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li><li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li></ul><p>使用</p><ol><li>声明拦截器的bean，并实现HandlerInterceptor接口（注意：扫描加载bean） <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(..)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(..)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(..)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义配置类，继承WebMvcConfigurationSupport，实现addInterceptor方法（注意：扫描加载配置） <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加拦截器并设定拦截的访问路径，路径可以通过可变参数设置多个 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/xxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用标准接口WebMvcConfiguration简化开发（注意：侵入式较强） <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/xxx&quot;</span>,<span class="string">&quot;/xxx/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行流程<br><img src="/2024/03/27/ssm/img_6.png" alt="img_6.png"></li></ol><h4 id="拦截器参数"><a href="#拦截器参数" class="headerlink" title="拦截器参数"></a>拦截器参数</h4><ul><li>前置处理  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                         HttpServletResponse response,</span></span><br><span class="line"><span class="params">                         Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>request：请求对象</li><li>response：响应对象</li><li>handler：被调用的处理器对象，本质上是一个方法对象，对反射技术中的Method对象进行了再包装</li></ul></li><li>返回值<ul><li>返回值为false，被拦截的处理器将不执行</li></ul></li></ul></li><li>后置处理  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       Object handler，</span></span><br><span class="line"><span class="params">                       ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>modelAndView：如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整</li></ul></li></ul></li><li>完成后处理  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            Object handler，</span></span><br><span class="line"><span class="params">                            Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>ex：如果处理器执行过程出现异常对象，可以针对异常情况进行单独处理</li></ul></li></ul></li></ul><h4 id="拦截器链配置"><a href="#拦截器链配置" class="headerlink" title="拦截器链配置"></a>拦截器链配置</h4><p>多拦截器执行顺序</p><ul><li>当配置多个拦截器时，形成拦截器链</li><li>拦截器链的运行顺序参照拦截器添加顺序为准</li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h4><p>Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建。</p><p>Maven作用：</p><ul><li>方便的依赖管理：方便快捷的管理项目依赖的资源（jar包），避免版本冲突问题（通过pom导入依赖）</li><li>统一的项目结构：提供标准，统一的项目结构<br>  <img src="/2024/03/27/ssm/img_7.png" alt="img_7.png"></li><li>标准的项目构建流程：标准跨平台（Linux，Windows，MacOS）的自动化项目构建方式</li></ul><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><ol><li>依赖配置<ul><li>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖</li><li>配置：<ol><li>在pom.xml中编写<dependencies>标签</dependencies></li><li>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></li><li>定义坐标的groupId,artifactId,version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol></li><li>注意事项：如果引入的依赖，在本地厂库中不存在，将会连接远程仓库&#x2F;中央仓库，然后下载依赖。如果不知道依赖的坐标信息，可以到 <a href="http://mvnrepository.com/">http://mvnrepository.com/</a> 中搜索。</li></ul></li><li>依赖传递<ul><li>依赖具有传递性<ul><li>直接依赖：当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li></ul></li><li>依赖传递冲突问题<ul><li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul></li><li>可选依赖<ul><li>可选依赖指对外隐藏当前所依赖的资源–不透明<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递性--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">deoendency</span>&gt;</span></span><br><span class="line">  ```     </span><br><span class="line">- 排除依赖</span><br><span class="line">  - 排除依赖指主动断开依赖的资源，被排除的资源无需指定版本--不需要</span><br><span class="line">  ```xml</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">deoendency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>依赖范围<ul><li>依赖的jar包，默认情况下，可以在任何地方使用。可以通过<scope>…</scope>设置其作用范围。</li><li>作用范围：<ul><li>主程序范围有效。（main文件夹范围内）</li><li>测试程序范围有效。（test文件夹范围内）</li><li>是否参与打包运行。（package指令范围内）<br> <img src="/2024/03/27/ssm/img_8.png" alt="img_8.png"></li></ul></li></ul></li><li>生命周期<ul><li>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。</li><li>Maven中有3套相互独立的生命周期<ul><li>clean：清理工作<ul><li>pre-clean</li><li><strong>clean</strong>:移除上一次构建生成的文件</li><li>post-clean</li></ul></li><li>default：核心工作，如：编译，测试，打包，安装，部署等。<ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li><strong>compile</strong>：编译项目源代码</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li><strong>test</strong>：使用合适的单元测试框架运行测试（junit）</li><li>prepare-package</li><li><strong>package</strong>：将编译后的文件打包，如：jar，war等</li><li>verify</li><li><strong>install</strong>：安装项目到本地仓库</li><li>deploy</li></ul></li><li>site：生成报告，发布站点等。<ul><li>pre-site</li><li>site</li><li>post-site</li><li>site-deploy</li></ul></li></ul></li><li>在同一套生命周期中（clean，default，site各是一套），当运行后面的阶段时，前面的阶段都会运行。</li><li>执行指定生命周期的两种方式：<ul><li>在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行。</li><li>在命令行中，通过命令执行（mvn clean，mvn compile……)。</li></ul></li><li>Maven的生命周期只是一个抽象的概念，实际上并不执行具体的操作，具体操作是由与其绑定的Maven插件来完成的。</li></ul></li></ol><h4 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h4><ol><li>分模块开发意义<ul><li>将原始模块按照功能拆分成若干个子模块，方便模块间的相互调用，接口共享</li></ul></li><li>分模块开发<ol><li>创建Maven模块</li><li>书写模块代码</li><li>通过maven指令安装模块到本地仓库（install指令）<ul><li>团队内部开发需要发布模块功能到团队内部可共享的仓库中（私服）</li></ul></li></ol></li></ol><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul><li>聚合：将多个模块组织成一个整体，同时进行项目构建的过程称为聚合</li><li>聚合工程：通常是一个不具有业务功能的“空”工程（有且仅有一个pom文件）</li><li>作用：使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建<ul><li>当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题</li></ul></li></ul><p>聚合工程开发</p><ol><li>创建Maven模块，设置打包类型为pom <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>每个maven工程都有对应的打包方式，默认为jar，web工程打包方式为war</li></ul></li><li>设置当前聚合工程所包含的子模块名称 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>聚合工程中所包含的模块在进行建构时会根据模块间的依赖关系设置构建顺序，与聚合工程中模块的配置书写位置无关</p><p>参与聚合的工程无法向上感知是否参与聚合，只能向下配置哪些模块参与本土工程的聚合</p></li></ul></li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见与依赖关系的继承</li><li>作用：<ul><li>简化配置</li><li>减少版本冲突</li></ul></li></ul><ol><li>创建Maven模块，设置打包类型为pom <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    ```    </span><br><span class="line">    - 注意事项：建议父工程打包方式设置为pom</span><br><span class="line">2. 在父工程的pom文件中配置依赖关系（子工程将沿用父工程中的依赖关系）</span><br><span class="line">    ```xml</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在父工程的pom文件中配置子工程可选的依赖关系 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在子工程中配置当前工程所继承的父工程 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义该工程的父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--填写父工程的pom文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在子工程中配置使用父工程中可选依赖的坐标 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意事项：子工程中使用父工程中的可选依赖时，仅需要提供群组id和项目id，无需提供版本，版本由父工程统一提供，避免版本冲突</li><li>子工程中还可以定义父工程中没有定义的依赖关系</li></ul></li></ol><h4 id="聚合和继承的区别"><a href="#聚合和继承的区别" class="headerlink" title="聚合和继承的区别"></a>聚合和继承的区别</h4><ul><li>作用<ul><li>聚合用于快速构建项目</li><li>继承用于快速配置项目</li></ul></li><li>相同点<ul><li>聚合与继承的pom.xml文件打包方式均为pom,可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li>不同点<ul><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>通过属性可以方便依赖版本的更改</p><ol><li>定义属性 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义自定义属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引用属性 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="配置文件加载属性"><a href="#配置文件加载属性" class="headerlink" title="配置文件加载属性"></a>配置文件加载属性</h4><p>资源文件引用pom中的属性</p><ol><li>定义属性 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义自定义属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置文件中引用属性 <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">$&#123;jdbc.url&#125;</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li><li>开启资源文件目录加载属性的过滤器 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置maven打war包时，忽略web.xml检查 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>其他属性<br><img src="/2024/03/27/ssm/img_9.png" alt="img_9.png"></li></ol><h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h4><ul><li>工程版本：<ul><li>SNAPSHOT（快照版本）<ul><li>项目开发过程中临时输出的版本，称为快照版本</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li>RELEASE（发布版本）<ul><li>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li></ul></li></ul></li><li>发布版本<ul><li>alpha版</li><li>beta版</li><li>纯数字版</li></ul></li></ul><h4 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h4><p>多环境开发，是指在开发，生产，测试等多个阶段，使用不同的数据库等，从而防止一同暴毙</p><ul><li>maven提供配置多种环境的设定，帮助开发者使用过程中快速切换环境</li></ul><ol><li>定义多环境 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--定义多环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义具体的环境：生产环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义环境对应的唯一名称--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义环境中专用的属性值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127/0/0/1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置默认启动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义具体的环境：开发环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    ```    </span><br><span class="line">2. 使用多环境（构建过程）</span><br><span class="line">    </span><br><span class="line">    使用设置默认启动项需要多次更改，比较麻烦，所以可以打开maven使用指令切换环境</span><br><span class="line">    ```cmd</span><br><span class="line">    mvn 指令 -p 环境定义id</span><br></pre></td></tr></table></figure> 范例： <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install -p pro_env</span><br></pre></td></tr></table></figure></li></ol><h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><p>方法：</p><ol><li>点击idea中maven中的闪电符号</li><li>使用命令<ul><li>跳过测试 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn 指令 -D skipTests</span><br></pre></td></tr></table></figure></li><li>范例 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    mvn install -D skipTests</span><br><span class="line">    ```   </span><br><span class="line">   - 注意事项：执行的项目构建指令必须包含测试生命周期，否者无效果。例如执行compile生命周期，不经过test生命周期</span><br><span class="line"><span class="number">3</span>. 细粒度控制跳过测试</span><br><span class="line">    ```xml</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2</span>.<span class="number">22</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;skipTests&gt;true&lt;/skipTests&gt;&lt;!--设置跳过测试--&gt;</span><br><span class="line">            &lt;includes&gt;&lt;!--包含指定的测试用例--&gt;</span><br><span class="line">                &lt;include&gt;**/User**Test.java&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;excludes&gt;&lt;!--排除指定的测试用例--&gt;</span><br><span class="line">                &lt;exclude&gt;**/User**TestCase.java&lt;/exclude&gt;</span><br><span class="line">            &lt;/excludes&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h4><p>私服简介</p><ul><li>私服是一台独立的服务器，用于解决团队内部的资源共享与资源同步问题</li><li>Nexus<ul><li>Sonatype公司的一款maven私服产品</li></ul></li></ul><p>Nexus安装与启动</p><ul><li>启动服务器（命令行启动）<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexus.exe /run nexus</span><br></pre></td></tr></table></figure></li><li>访问服务器（默认端口：8081）<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">http://<span class="title">localhost</span>:8081</span></span><br></pre></td></tr></table></figure></li><li>修改基础配置信息<ul><li>安装路径下etc目录中nexus-default.properties文件保存有nexus基础配置信息，例如默认访问端口</li></ul></li><li>修改服务器运行配置信息<ul><li>安装路径下bin目录中nexus.vmoptions文件保存有nexus服务器启动对应的配置信息，例如默认占用内存空间</li></ul></li></ul><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><h4 id="SpringBoot简单使用"><a href="#SpringBoot简单使用" class="headerlink" title="SpringBoot简单使用"></a>SpringBoot简单使用</h4><ol><li>创建新模块，选择Spring初始化（Spring Initializr），并配置模块相关基础信息</li><li>选择当前模块需要使用的技术集</li><li>开发控制器类</li><li>运行自动生成的Application类</li></ol><ul><li>最简SpringBoot程序所包含的基础文件<ul><li>pom.xml文件</li><li>Application类</li></ul></li><li>注意：基于idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构，在Spring官网也能创建。</li></ul><h4 id="SpringBoot项目快速启动"><a href="#SpringBoot项目快速启动" class="headerlink" title="SpringBoot项目快速启动"></a>SpringBoot项目快速启动</h4><ol><li>对SpringBoot项目打包（执行Maven构建指令package）</li><li>执行启动指令 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot.jar</span><br></pre></td></tr></table></figure><ul><li>jar支持命令行启动需要依赖maven插件支持，请确认打包时是否具有SpringBoot对应的maven插件 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h4><ul><li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来<em>简化</em>Spring应用的<em>初始搭建</em>以及<em>开发过程</em></li><li>Spring程序缺点<ul><li>配置繁琐</li><li>依赖设置繁琐</li></ul></li><li>SpringBoot程序优点<ul><li>自动配置</li><li>起步依赖（简化依赖配置）</li><li>辅助功能（内置服务器,……）</li></ul></li><li>SpringBoot起步依赖<ul><li>starter<ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li></ul></li><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li><li>spring-boot-starter-parent(2.5.0)与spring-boot-starter-parent(2.4.6)共计57处坐标版本不同</li></ul></li><li>实际开发<ul><li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</li><li>如发生坐标错误，再指定version（要小心版本冲突）</li></ul></li><li>辅助功能 <ul><li>内置tomcat服务器</li></ul></li><li>使用maven依赖管理变更起步依赖项<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat），谷歌应用引擎（GAE）已经全面切换为Jetty</li></ul></li></ul><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>配置格式</p><ul><li>SpringBoot提供了多种属性配置方式<ul><li>application.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></li><li>application.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li>application.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li>优先级:properties&gt;yml&gt;yaml</li><li>SpringBoot核心配置文件名为application</li><li>SpringBoot内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</li></ul></li><li>yaml<ul><li>YAML(YAML Ain’t Markup Language),一种数据序列化格式</li><li>优点：<ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul></li><li>YAML文件扩展名<ul><li>.yml(主流)</li><li>.yaml</li></ul></li><li>yaml语法规则<ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li><em>属性值前面添加空格</em>（属性名与属性值之间使用冒号+空格作为分隔）</li><li><code>#</code> 表示注释<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">VanSherry</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"> <span class="attr">tel:</span> <span class="number">114514</span></span><br></pre></td></tr></table></figure></li></ul></li><li>yaml数组数据<ul><li>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">VanSherry</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"> <span class="attr">tel:</span> <span class="number">114514</span></span><br><span class="line"> <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ai算法</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br></pre></td></tr></table></figure></li></ul></li><li>yaml数据读取方式（3种）<ul><li>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">VanSherry</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"> <span class="attr">el:</span> <span class="number">114514</span></span><br><span class="line"> <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ai算法</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/yml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YmlController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lessonName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;enterprise.subject[1]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String[] subject_01;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>封装全部数据到Environment对象<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">VanSherry</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"> <span class="attr">el:</span> <span class="number">114514</span></span><br><span class="line"> <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ai算法</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="string">```</span>    </span><br><span class="line"><span class="string">```java</span></span><br><span class="line"><span class="string">@RestController</span></span><br><span class="line"><span class="string">@RequestMapping(&quot;/yml&quot;)</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">YmlController</span> &#123;</span><br><span class="line">    <span class="string">@Autowired</span></span><br><span class="line">    <span class="string">private</span> <span class="string">Environment</span> <span class="string">environment;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">lessonName</span> <span class="string">=</span> <span class="string">environment.getProperty(&quot;lesson&quot;);</span></span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">lessonName</span> <span class="string">=</span> <span class="string">environment.getProperty(&quot;enterprise.name&quot;);</span></span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">lessonName</span> <span class="string">=</span> <span class="string">environment.getProperty(&quot;enterprise.subject</span>[<span class="number">0</span>]<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li>自定义对象封装指定数据<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">VanSherry</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"> <span class="attr">el:</span> <span class="number">114514</span></span><br><span class="line"> <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ai算法</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="string">```</span>      </span><br><span class="line"><span class="string">```java</span></span><br><span class="line"><span class="string">@Component</span></span><br><span class="line"><span class="string">@ConfigurationProperties(prefix</span> <span class="string">=</span> <span class="string">&quot;enterprise&quot;</span><span class="string">)</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">Yml</span> &#123;</span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">name;</span></span><br><span class="line">    <span class="string">private</span> <span class="string">Integer</span> <span class="string">age;</span></span><br><span class="line">    <span class="string">private</span> <span class="string">String</span>[] <span class="string">subject;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>做自定义封装的时候会报警告，解决方案：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">articactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">articactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="多环境开发配置"><a href="#多环境开发配置" class="headerlink" title="多环境开发配置"></a>多环境开发配置</h4><ul><li>yaml格式<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">pro</span></span><br><span class="line"><span class="comment">#启动指定环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="comment">#设置生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#生产环境具体参数设定</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#设置开发环境</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="comment">#生产环境具体参数设定</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#推荐格式</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">config:</span></span><br><span class="line">  <span class="attr">activate:</span></span><br><span class="line">   <span class="attr">on-profile:</span> <span class="string">test</span>   </span><br></pre></td></tr></table></figure></li><li>properties文件多环境启动<ul><li>主启动配置文件application.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure></li><li>环境分类配置文件application-pro.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></li><li>环境分类配置文件application-dev.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure></li><li>环境分类配置文件application-test.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="多环境命令行启动参数设置"><a href="#多环境命令行启动参数设置" class="headerlink" title="多环境命令行启动参数设置"></a>多环境命令行启动参数设置</h4><ul><li>带参数启动SpringBoot  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot.jar --spring.profiles.active=test</span><br></pre></td></tr></table></figure>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot.jar --server.port=<span class="number">88</span></span><br></pre></td></tr></table></figure></li><li>参数加载优先顺序:查SpringBoot官网文档</li></ul><h4 id="多环境开发兼容问题（Maven与boot）"><a href="#多环境开发兼容问题（Maven与boot）" class="headerlink" title="多环境开发兼容问题（Maven与boot）"></a>多环境开发兼容问题（Maven与boot）</h4><p>Boot应该听从Maven的配置，因为打包时使用的是Maven打包，运行的是打包后的jar</p><ol><li>Maven种设置多环境属性 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>SpringBoot种引用Maven属性 <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">82</span>    </span><br></pre></td></tr></table></figure></li><li>对资源文件开启对默认占位符的解析 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>执行Maven打包指令</li></ol><h4 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h4><ul><li>SpringBoot中4级配置文件(优先级由高到低)<ul><li>1级：file:config&#x2F;application.yml</li><li>2级：file:application.yml</li><li>3级：classpath:config&#x2F;application.yml</li><li>4级：classpath:application.yml</li></ul></li><li>作用：<ul><li>1级与2级留做系统打包后设置通用属性</li><li>3级与4级用于系统开发阶段设置通用属性</li></ul></li></ul><h4 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h4><ol><li><p>整合JUnit</p><ul><li>SpringBoot整合JUnit  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XxxJUnitApplicationTests</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XxxService xxxService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testXxx</span><span class="params">()</span>&#123;</span><br><span class="line">        xxxService.xxx();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@SpringBootTest<ul><li>类型：测试类注解</li><li>位置：测试类定义上方</li><li>作用：设置JUnit加载的SpringBoot启动类</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = xxxxxxApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxxxxxApplicationTests</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性<ul><li>classes：设置SpringBoot启动类</li></ul></li><li>如果测试类在SpringBoot启动类的包或子包中，可以省略启动类的设置，也就是省略classes的设定</li></ul></li></ul></li><li><p>SpringBoot整合SSM</p><p> SpringBoot自动整合Spring，SpringMVC</p><ul><li>SpringBoot整合Mybatis<ul><li>设置数据源参数<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource#用Druid的时候使用</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xxx</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><ul><li>注意事项：S【ringBoot版本低于2.4.3（不含），Mysql驱动版本大于8.0时，需要在url连接串中配置时区<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">jdbc:mysql://localhost:3306/xxx?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>或在MySQL数据库端配置时区解决此问题</li></ul></li><li>加上@Mapper</li></ul></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2024/03/24/mybatisplus/"/>
      <url>/2024/03/24/mybatisplus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-Plus学习笔记"><a href="#MyBatis-Plus学习笔记" class="headerlink" title="MyBatis-Plus学习笔记"></a>MyBatis-Plus学习笔记</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><ol><li>特性</li></ol><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="引入MybatisPlus的起步依赖"><a href="#引入MybatisPlus的起步依赖" class="headerlink" title="引入MybatisPlus的起步依赖"></a>引入MybatisPlus的起步依赖</h4><ul><li>MyBatisPlus官方提供了starter，其中集成了Mybatis和MybatisPlus的所有功能，并且实现了自动装配效果。</li><li>因此我们可以用MybatisPlus的starter代替Mybatis的starter：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MybatisPlus--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="定义Mapper"><a href="#定义Mapper" class="headerlink" title="定义Mapper"></a>定义Mapper</h4><ul><li>自定义的Mapper继承MybatisPlus提供的BaseMapper接口：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h4><p>MP是如何知道访问的哪张表？知道表中有哪些信息呢？</p><p>MP通过扫描实体类，并基于反射获取实体类信息作为数据库表信息。</p><p>约定实体类中：</p><ul><li>类名的驼峰转下划线作为表名</li><li>名为id的字段作为主键</li><li>变量名驼峰转下划线作为表的字段名</li></ul><p>如果实体类不符合约定，将使用注解，MybatisPlus比较常用的几个注解如下：</p><ul><li>@TableName: 用来指定表名<ul><li>在类上@TableName(“表名”)</li></ul></li><li>@Tabled: 用来指定表中的主键字段信息<ul><li>@Tabled(value&#x3D; “主键字段”,type&#x3D; IdType.AUTO)</li></ul></li><li>@TableField: 用来指定表中的普通字段信息<ul><li>@TableField(“字段名”)</li></ul></li></ul><p>IdType枚举：</p><ul><li>AUTO：数据库自增长</li><li>INPUT：通过set方法自行输入</li><li>ASSIGN_ID：(默认)分配 ID，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultIdentifierGenerator雪花算法</li></ul><p>使用@TableField的常见场景:</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头，且是布尔值(如果不使用，会把is去掉作为字段名)</li><li>成员变量名与数据库关键字冲突(注解中的字段加上转义字符，如@TableField(“<code>order</code>“))</li><li>成员变量不是数据库字段</li></ul><h4 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h4><p>MyBatisPlus的配置项继承了MyBatis原生配置和一些自己特有的配置。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  type-aliases-package: xxx.xxxxx #别名扫描包</span><br><span class="line">  mapper-location: &quot;xxxx.xxxx.xml&quot; # Mapper.xml文件地址，默认值</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true # 是否开启下划线和驼峰的映射</span><br><span class="line">    cache-enabled: false # 是否开启二级缓存</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      id-type: assign_id # id为雪花算法生成</span><br><span class="line">      update-strategy: not_null # 更新策略：只更新非空字段</span><br></pre></td></tr></table></figure><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><h4 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h4><p>MyBatisPlus支持各种复杂的where条件，可以满足日常开发的所有需求。<br><img src="/2024/03/24/mybatisplus/img.png" alt="img.png"></p><ul><li>QueryWrapper和LambdaQueryWrapper通常用来构建select，delete，update的where条件部分。</li><li>UpdateWrapper和LambdaUpdateWrapper通常只有在set语句比较特殊才使用。</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper,避免硬编码。</li></ul><h4 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h4><p>我们可以利用MyBatisPlus的Wrapper来构建复杂的where条件，然后自己自定义SQL语句中剩下的部分。</p><ol><li>基于Wrapper构建where条件。</li><li>在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew。</li><li>自定义SQL，并使用Wrapper条件。</li></ol><h4 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h4><p>Service接口的继承比较复杂<br><img src="/2024/03/24/mybatisplus/img_1.png" alt="img_1.png"><br>其中UserService和UserServiceImpl是自己定义的，需要继承IService和ServiceImpl。</p><ul><li>自定义Service接口继承IService接口。</li><li>自定义Service实现类，实现自定义接口并继承ServiceImpl类。</li></ul><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>引入依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;最新版本&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>想要根据数据库自动生成代码，需要写许多生成代码的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">    .globalConfig(builder -&gt; &#123;</span><br><span class="line">        builder.author(<span class="string">&quot;baomidou&quot;</span>) // 设置作者</span><br><span class="line">            .enableSwagger() // 开启 swagger 模式</span><br><span class="line">            .fileOverride() // 覆盖已生成文件</span><br><span class="line">            .outputDir(<span class="string">&quot;D://&quot;</span>); // 指定输出目录</span><br><span class="line">    &#125;)</span><br><span class="line">    .dataSourceConfig(builder -&gt; builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -&gt; &#123;</span><br><span class="line">        int typeCode = metaInfo.getJdbcType().TYPE_CODE;</span><br><span class="line">        if (typeCode == Types.SMALLINT) &#123;</span><br><span class="line">            // 自定义类型转换</span><br><span class="line">            return DbColumnType.INTEGER;</span><br><span class="line">        &#125;</span><br><span class="line">        return typeRegistry.getColumnType(metaInfo);</span><br><span class="line"></span><br><span class="line">    &#125;))</span><br><span class="line">    .packageConfig(builder -&gt; &#123;</span><br><span class="line">        builder.parent(<span class="string">&quot;com.baomidou.mybatisplus.samples.generator&quot;</span>) // 设置父包名</span><br><span class="line">            .moduleName(<span class="string">&quot;system&quot;</span>) // 设置父包模块名</span><br><span class="line">            .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="string">&quot;D://&quot;</span>)); // 设置mapperXml生成路径</span><br><span class="line">    &#125;)</span><br><span class="line">    .strategyConfig(builder -&gt; &#123;</span><br><span class="line">        builder.addInclude(<span class="string">&quot;t_simple&quot;</span>) // 设置需要生成的表名</span><br><span class="line">            .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); // 设置过滤表前缀</span><br><span class="line">    &#125;)</span><br><span class="line">    .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板</span><br><span class="line">    .execute();</span><br><span class="line"><span class="comment">#交互式生成</span></span><br><span class="line">FastAutoGenerator.create(DATA_SOURCE_CONFIG)</span><br><span class="line">    // 全局配置</span><br><span class="line">    .globalConfig((scanner, builder) -&gt; builder.author(scanner.apply(&quot;请输入作者名称？&quot;)).fileOverride())</span><br><span class="line">    // 包配置</span><br><span class="line">    .packageConfig((scanner, builder) -&gt; builder.parent(scanner.apply(&quot;请输入包名？&quot;)))</span><br><span class="line">    // 策略配置</span><br><span class="line">    .strategyConfig((scanner, builder) -&gt; builder.addInclude(getTables(scanner.apply(&quot;请输入表名，多个英文逗号分隔？所有输入 all&quot;)))</span><br><span class="line">                        .controllerBuilder().enableRestStyle().enableHyphenStyle()</span><br><span class="line">                        .entityBuilder().enableLombok().addTableFills(</span><br><span class="line">                                new Column(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT)</span><br><span class="line">                        ).build())</span><br><span class="line">    /*</span><br><span class="line">        模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker</span><br><span class="line">       .templateEngine(new BeetlTemplateEngine())</span><br><span class="line">       .templateEngine(new FreemarkerTemplateEngine())</span><br><span class="line">     */</span><br><span class="line">    .execute();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 处理 all 情况</span><br><span class="line">protected static List&lt;String&gt; getTables(String tables) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;all&quot;</span>.equals(tables) ? Collections.emptyList() : Arrays.asList(tables.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可以通过idea的一个插件MybatisX自动生成这些代码。</p><p>或者用一个动漫头的MyBatisPlus插件生成代码。</p><ul><li>other -&gt; Config Database 选择数据库</li><li>other -&gt; Code Generator 生成代码</li></ul><h4 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h4><p>与IService接口的区别是你需要告诉他实体类的类别。</p><p>多个service相互调用的时候，使用Db静态工具。</p><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><p>基于代码逻辑模拟删除效果，但并不会真正删除数据</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为 1</li><li>查询时只查询标记为 0 的数据</li></ul><p>MybatisPlus提供了逻辑删除功能，无需改变方法调用的方式，而是在底层帮我们自动修改CRUD的语句。我们要做的就是在application.yml文件中配置逻辑删除的字段名称和值即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  global_config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-delete-field: flag <span class="comment"># 全局逻辑删除的实体字段名，字段类型可以是boolean,integer</span></span><br><span class="line">      logic-delete-value: 1 <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      logic-not-delete-value: 0 <span class="comment"># 逻辑未删除值(默认为0)</span></span><br></pre></td></tr></table></figure><p>逻辑删除本身也有自己的问题，比如：</p><ul><li><p>会导致数据库表垃圾数据越来越多，影响查询效率</p></li><li><p>SQL中全部都需要对逻辑删除字段做判断，影响查询效率</p></li><li><p>因此，不推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p></li></ul><h4 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h4><ol><li>标记对应数据库的int值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnumValue</span><br><span class="line">private final int value;</span><br></pre></td></tr></table></figure></li><li>在application.yml中配置全局枚举处理器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure></li><li>可通过@JsonValue选中返回值是int还是String等<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JsonValue</span><br><span class="line">private final String desc;</span><br></pre></td></tr></table></figure></li></ol><h4 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h4><p>对于数据库中的JSON各式的数据，Java只能通过String来接收，但是执行业务的时候，如果想用JSON中的某一条数据，就非常困难。</p><p>因此需要定义一个与JSON数据对于的类，并且将他与数据库中的JSON关联起来</p><ol><li>需要在实体类中对应JSON的变量上添加注解@TableField(typeHandler &#x3D; JacksonTypeHandler.class)(使用JacksonTypeHandler不需要再引入依赖)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@TableField(typeHandler = JacksonTypeHandler.class)</span><br><span class="line">private <span class="string">&quot;定义的JSON类&quot;</span> <span class="string">&quot;变量名&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>为了避免因为对象嵌套而需要定义复杂的ResultMap，在实体类上加上注解@TableName(autoResultMap &#x3D; true)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@TableName(value=<span class="string">&quot;user&quot;</span>,autoResultMap = <span class="literal">true</span>)</span><br><span class="line">public class User&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初学微服务（持续学习中）</title>
      <link href="/2024/03/22/microservices/"/>
      <url>/2024/03/22/microservices/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>微服务是一种软件架构风格，他说以专注于单一职责的很多小型项目为基础，组合出复杂的大型应用。<br><img src="/2024/03/22/microservices/1.jpg" alt="1.jpg"></p><ul><li>单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。</li><li>微服务架构：是服务化思想指导下的一套最佳时间架构方案。服务化，就是把单体架构中的功能模块拆分为多个独立项目。</li></ul><h3 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h3><h4 id="拆分目标"><a href="#拆分目标" class="headerlink" title="拆分目标"></a>拆分目标</h4><ul><li>高内聚：每个微服务的职责要尽量单一，包含的业务相互关联度高，完整度高。</li><li>低耦合：每个微服务的功能要相对独立，尽量减少对其他微服务的依赖。</li></ul><h4 id="拆分方式"><a href="#拆分方式" class="headerlink" title="拆分方式"></a>拆分方式</h4><ul><li>纵向拆分：按照业务模板来拆分。</li><li>横向拆分：抽取公共服务，提高复用性。</li></ul><h4 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h4><ul><li>独立Project：多个项目</li><li>Maven聚合：多个模块</li></ul><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>拆分后，某些数据在不同服务，无法直接调用本地方法查询数据，所以需要远程调用。</p><p>可以通过RestTemplate.exchange进行模拟前端请求，实现不同模板的交互。</p><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>为了内存，效率，安全等需求通常要同时创建多个服务实例。</p><p>为了识别多个服务实例的单个地址，出现了注册中心对服务实例进行了管理。</p><ul><li>服务提供者：暴露服务接口，供其他服务调用。</li><li>服务消费者：调用其他服务提供的接口。</li><li>注册中心：记录并监控微服务各实例状态，推送服务变更信息。</li></ul><h4 id="注册中心原理"><a href="#注册中心原理" class="headerlink" title="注册中心原理"></a>注册中心原理</h4><ol><li>服务提供者进行注册服务信息。<br>（心跳续约）</li><li>服务调用者订阅服务信息。<br>（推送变更）</li><li>负载均衡：挑选一个实例的算法。</li><li>实现远程调用。</li></ol><h4 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h4><p>Nacos是目前国内企业占比最多的注册中心组件。它是阿里巴巴的产品，目前已经加入SpringCloudAlibaba中。</p><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><p>引入nacos discovery依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置Nacos地址（yml文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">name: xxxxxx <span class="comment"># 服务名称</span></span><br><span class="line">  cloud:</span><br><span class="line">nacos：</span><br><span class="line">  server-addr：xxx.xxx.xxx.xxx：xxxx <span class="comment">#nacos地址</span></span><br></pre></td></tr></table></figure><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><p>API DiscoveryClient</p><ol><li>根据服务名称，拉取服务的实例列表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;服务名称&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>负载均衡，挑选一个实例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServiceInstance instance = instances.get(RandomUtil.randomInt(instances.size()));</span><br></pre></td></tr></table></figure></li><li>获取实例的IP和端口<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URI uri = instance.getUri();</span><br></pre></td></tr></table></figure>这样进行远程调用，代码将会变得十分繁琐，于是出现了OpenFeign。</li></ol><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><p>OpenFeign是一个声明式的http客户端，是SpringCloud在Eureka公司开源的Feign基础上改造而来。</p><p>其作用就是基于SpringMVC的常见注解，帮我们优雅的实现http请求的发送。</p><p>OpenFeign已经被SpringCloud自动装配，实现起来非常简单：</p><ol><li>引入依赖，包括OpenFeign和负载均衡组件SpringCloudLoadBalancer（早期用的Ribbon）。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--OpenFeign--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframwork.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--负载均衡--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>通过@EnableFeignClients注解，启用OpenFeign功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Xxxxx&#123; // ... 略&#125;</span><br></pre></td></tr></table></figure></li><li>编写FeignClient<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value = <span class="string">&quot;服务名称&quot;</span>)</span><br><span class="line">//拉取实例列表,并且调用依赖中的负载均衡算法获取一个实例</span><br><span class="line">public interrface ItemClient&#123;</span><br><span class="line">  @GetMapping(<span class="string">&quot;请求路径&quot;</span>)</span><br><span class="line">  //采用什么请求方式,请求路径</span><br><span class="line">  List&lt;<span class="string">&quot;实体类&quot;</span>&gt; queryItemByIds(@RequestParam(<span class="string">&quot;ids&quot;</span>) Collection&lt;Long&gt; ids);</span><br><span class="line">  //设置请求参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用FeignClient,实现远程调用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="string">&quot;实体类&quot;</span>&gt; items = itemClient.queryItemByIds(List.of(1,2,3))</span><br><span class="line">//传递参数</span><br></pre></td></tr></table></figure></li></ol><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>OpenFeign对Http请求做了优雅的伪装，不过其底层发起http请求，依赖于其他的框架。这些框架可以自己选择，包括以下三种：</p><ul><li>HttpURLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池<br>OpenFeign整合OKHttp的步骤如下：</li></ul><ol><li>引入依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>开启连接池功能<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">    okhttp:</span><br><span class="line">        enabled: true # 开启OKHttp连接池支持</span><br></pre></td></tr></table></figure></li></ol><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ol><li>在一个服务下分出一个模块，专门存放全部client（缺点：服务功能不够单一，简洁）</li><li>单独分出一个大模块，存放全部client（缺点：耦合性较高）<br>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种方式解决：</li></ol><ul><li>指定FeignClient所在包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClients(basePackeges = <span class="string">&quot;client的包名&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>指定FeignClient字节码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>OpenFeign只会在FeignClient所在包的日志级别为DEBUG时，才会输出日志。而且其日志级别有4级：</p><ul><li>NONE:不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间。</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息。</li><li>FULL：记录所有请求和响应的明细，包括头信息，请求体，元数据。<br>要自定义日志级别需要声明一个类型为Logger.Level的Bean，在其中定义日志级别(放在通用模块)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class DefaultFeignConfig &#123;</span><br><span class="line">  @Bean</span><br><span class="line">  public Logger.Level <span class="function"><span class="title">feignLogLevel</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> Logger.Level.FUll;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但此时这个Bean并未生效，要想配置某个FeignClient的日志，可以在@FeignClient注解中声明：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value = &quot;服务名称&quot;,configuration = DefaultFeignConfig.class)</span><br></pre></td></tr></table></figure>如果想要全局配置，让所有FeignClient都按照这个日志配置，则需要在@EnableFeignClients注解中声明(启动类上)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClient(defaultConfiguration = DefaultFeignConfig.class)</span><br></pre></td></tr></table></figure>(后面还没学，等学了再更新 &amp;v&amp; )</li></ul><h3 id="请求路由"><a href="#请求路由" class="headerlink" title="请求路由"></a>请求路由</h3><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><h3 id="服务保护"><a href="#服务保护" class="headerlink" title="服务保护"></a>服务保护</h3><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h3 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h3><h3 id="消息可靠性"><a href="#消息可靠性" class="headerlink" title="消息可靠性"></a>消息可靠性</h3><h3 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h3><h3 id="分布式搜索"><a href="#分布式搜索" class="headerlink" title="分布式搜索"></a>分布式搜索</h3><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><h3 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>朝辞项目技术与面试总结</title>
      <link href="/2024/03/21/zhaociInterview/"/>
      <url>/2024/03/21/zhaociInterview/</url>
      
        <content type="html"><![CDATA[<h1 id="朝辞项目技术与面试总结"><a href="#朝辞项目技术与面试总结" class="headerlink" title="朝辞项目技术与面试总结"></a>朝辞项目技术与面试总结</h1><p>以下是技术与内容大纲<br><img src="/2024/03/21/zhaociInterview/img.png" alt="img.png"></p><h1 id="开发技术基础"><a href="#开发技术基础" class="headerlink" title="开发技术基础"></a>开发技术基础</h1><h2 id="1-项目结构-业务逻辑-代码风格"><a href="#1-项目结构-业务逻辑-代码风格" class="headerlink" title="1.项目结构&amp;业务逻辑&amp;代码风格"></a>1.项目结构&amp;业务逻辑&amp;代码风格</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>文件写在main.java.common下，分包为：</p><ul><li><p>Entity层，entity为实体类，类中的实例变量与数据库表中的数据一一对应。</p></li><li><p>Controller层，controller层负责接收与发送前端传来的数据，将数据传给service层进行操作，再将service层的结果返回到前端，swagger中的页面配置也在这一层。</p></li><li><p>Service层，severce层即业务逻辑层，将代码写在这一层中，完成业务功能，调用mapper层间接对数据库操作。</p></li><li><p>Mapper层，mapper层即数据访问层，可以通过xml映射或注解的方法执行sql语句，对数据库进行增删改查等操作。</p></li><li><p>Utils层,utils层即工具类层，存放一些辅助的工具类，其中的方法通常是静态的，如MD5密码加密方法（利用Java提供的 MessageDigest 类和MD5算法对输入的密码字符串进行加密处理，然后将加密结果转换为十六进制字符串表示），JWT令牌的生成与解析方法。</p></li><li><p>Filter层，filter层即过滤器层，用来拦截过滤前端发来的请求，可以通过校验JWT令牌是否正确或者url中是否含有某字段来放行。</p></li><li><p>Exception层，exception层是异常处理层，由于业务的复杂性，通过此层实现全局异常处理，将异常信息包装成统一返回类返回，便于前端接收。</p></li><li><p>Config层，config层是配置层，通常用来配置管理系统的信息，如配置filter的过滤路径和swagger的功能和信息来生产动态接口文档。</p></li></ul><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><ul><li>类名用大驼峰命名法，方法名用小驼峰命名法，包全部用小写，适当使用行注释解释代码作用。</li></ul><h2 id="2-Mybatis-plus-Jpa的基础应用"><a href="#2-Mybatis-plus-Jpa的基础应用" class="headerlink" title="2.Mybatis-plus&amp;Jpa的基础应用"></a>2.Mybatis-plus&amp;Jpa的基础应用</h2><p>Mybatis是一个优秀的持久层框架，将java对象和数据库中的数据进行了映射，通过xml或者注解配置。</p><p>需要引入mybatis依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.5.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><p>如果通过xml映射，需要配置文件mybatis-config.xml来连接数据库和关联sql映射文件，并在mapper.xml中编写sql语句，通过sqlsession执行。</p></li><li><p>通过注解，则相对简单，在mapper层方法上方添加注解，并进行sql语句的编写即可。</p></li></ul><p>而mybatis-plus则是在mybatis的基础上扩展的增强工具，提供了便捷的api和丰富的功能。 使用前需要在mapper层继承BaseMapper父类，并添加&lt;实体类&gt;样本通过封装mybatis基本的操作接口，不需要编写sql语句便能在service层调用基本的增删改查。</p><p>需要引入依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;最新版本&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>此外，mybatis-plus引入了lambda表达式，还可通过querywrapper可以自定义拼接查询条件，使sql语句更加简洁。</p><p>Mybatis可以通过传递RowBounds对象，来进行数据库的分页操作，需要设置rowbounds的页数和每页数据条数，mybatis会自动识别rowbonds进行分页，需要注意的是rowbounds会将数据全部读入内存中，再进行分页，如果数据过多，请不要使用rowbounds，以免出现内存OOM，可以手写limit，将分页参数拼接在sql后面。</p><h2 id="3-Swagger基本知识以及用法"><a href="#3-Swagger基本知识以及用法" class="headerlink" title="3.Swagger基本知识以及用法"></a>3.Swagger基本知识以及用法</h2><p>Swagger是一个用于设计，构建和文档化API的工具，它允许开发人员设计API接口并生成对应的文档。便于前端人员时实查看后端的接口设计。</p><p>使用swagger需要导入两个相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>并在config层中创建sawgger启动类，在这里设置好sawgger界面的相关数据，并且添加controller层地址。（代码比较固定），然后在controller层通过注解补充接口信息，便于前端人员查看。</p><p>Swagger接口文档的地址一般为<br><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a><br>并可进行调试功能。</p><h2 id="2-Java基础与Java进阶（集合、泛型、注解、反射、异常处理等）"><a href="#2-Java基础与Java进阶（集合、泛型、注解、反射、异常处理等）" class="headerlink" title="2.Java基础与Java进阶（集合、泛型、注解、反射、异常处理等）"></a>2.Java基础与Java进阶（集合、泛型、注解、反射、异常处理等）</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>是一种容器，用来储存数据，集合的大小可变</p><ul><li>最常用的有ArrayList&lt;&gt;，有add，get，remove等增删改查的方法</li></ul><p>总体上java集合为collection&lt;&gt;往下分为list和set两类，list类添加的元素有序，可重复，有索引，set类添加的元素无序，不重复，无索引。</p><ul><li><p>List&lt;&gt;分为ArrayList和LinkedList</p></li><li><p>Set&lt;&gt;分为HashSet和TreeSet</p></li><li><p>HashSet下又有LinkedHashSet是有序，不重复，无索引的，TreeSet按照大小默认升序排序，不重复，无索引。</p></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>定义类，接口，方法时，同时声明了一个或者多个类型变量（如：&lt; E &gt;）,称为泛型类，泛型接口，泛型方法，他们统称为泛型。</p><ul><li><p>泛型提供了在编译阶段约束所能操作的数据类型，并自动检查的能力，可以避免强制类型转换及可能出现的异常。</p></li><li><p>泛型的本质是把具体的数据类型作为参数传给类型变量。</p></li></ul><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>不是程序本身，可以对程序作出解释，可以被其他程序（比如：编译器等）读取</p><ul><li><p>注解是以“@注释名”在代码中存在的，还可以添加一些参数值，可以附加在package，class，method，field上面，可以通过反射机制编程实现对这些数据的访问。<br>常见的有内置注解：@Override重写注解，@Deprecated不推荐使用，但是可以使用@SuppressWarnings（）镇压警告</p></li><li><p>元注解：注解其他注解的注解@Target用于描述注解的使用范围@Retention表示需要在什么级别保存该注释信息，用于描述注解的生命周期@Document说明注解将被包含在javadoc中Inherited子类可以继承父类的注解</p></li><li><p>自定义注解：@interface使用格式：public @ interface 注解名{定义内容}</p></li><li><p>注解参数定义方式：参数类型 + 参数名 ()；</p></li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>是java被视为动态语言的关键。</p><p>反射机制允许程序在执行期借助于Reflection API获得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>通过反射，我们可以在编译时无需知道具体类的情况下，获取类的构造函数、方法、字段等信息，并且可以在运行时动态地创建对象、调用方法、访问字段等。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是指程序在运行过程中遇到的意外情况或错误，它可以打破正常的程序执行流程。</p><p>由throwable和其下的error和exception组成，我们通常用exception来封装程序出现的问题。</p><p>Exception包括：</p><ul><li><p>运行时异常，RuntimeException及其子类，编译阶段不会出现错误提醒，运行时出现的异常（如数组索引越界异常）。</p></li><li><p>编译时异常，编译阶段就会出现错误提醒的异常。</p></li><li><p>自定义异常，运行时异常定义一个异常类继承RuntimeException,重写构造器，通过throw new 异常类（xxx）来创建异常对象并抛出。编译时异常继承Exception即可。</p></li></ul><p>异常的处理：</p><p>代码层面：throws和try-catch</p><p>开发中常见处理方式：一层层向上抛出异常，在最上层捕获异常，记录异常并相应合适的信息给用户观看 或者 尝试修复（最外层死循环）。</p><h2 id="3-MySQL基本语法操作"><a href="#3-MySQL基本语法操作" class="headerlink" title="3.MySQL基本语法操作"></a>3.MySQL基本语法操作</h2><ul><li><p>创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>指定在哪个数据库中操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>创建表格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表格名(</span><br><span class="line">列名1 INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">列名2 VARCHAR(10) NOT NULL,</span><br><span class="line">列名3 DATE NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 数据库名.表格名(</span><br><span class="line">列名1,列名2,列名3)</span><br><span class="line">VALUES (</span><br><span class="line">数值1，数值2，数值3);</span><br></pre></td></tr></table></figure></li><li><p>改变表格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE数据库名.表格名</span><br><span class="line">ADD 列名 数据类型 默认条件</span><br></pre></td></tr></table></figure></li><li><p>修改数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 数据库名.表格名</span><br><span class="line">SET 值</span><br><span class="line">WHERE 条件</span><br></pre></td></tr></table></figure></li><li><p>删除数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 数据库名.表格名</span><br><span class="line">WHERE 条件</span><br></pre></td></tr></table></figure></li><li><p>删除表格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 数据库名.表格名</span><br></pre></td></tr></table></figure></li><li><p>删除数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE 数据库名</span><br></pre></td></tr></table></figure></li><li><p>查看表格内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表格名</span><br><span class="line">WHERE 条件</span><br><span class="line">ORDER BY 列名 ASC（从小到大）</span><br></pre></td></tr></table></figure></li><li><p>查看某一列的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名1,列名2</span><br><span class="line">FROM 表格名</span><br><span class="line">WHERE 条件</span><br><span class="line">ORDER BY 列名 DESC（从大到小）</span><br></pre></td></tr></table></figure></li><li><p>两个表格交集的方式合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INNER JOIN</span><br><span class="line">ON 条件</span><br></pre></td></tr></table></figure></li><li><p>两个表格并集的方式合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT</span><br><span class="line">FROM</span><br></pre></td></tr></table></figure></li><li><p>左连接和右连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM</span><br><span class="line">LEFT JOIN</span><br><span class="line">ON</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Git基础与Linux基础"><a href="#4-Git基础与Linux基础" class="headerlink" title="4.Git基础与Linux基础"></a>4.Git基础与Linux基础</h2><h3 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h3><p>Git是一个分布式版本控制系统</p><h4 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h4><ul><li>git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 创建git仓库</li><li>touch文件名.后缀 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 创建文件</li><li>git add &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 工作区 –&gt; 暂存区</li><li>git commit -m “提示语” &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 暂存区 –&gt; 本地仓库</li><li>git status &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看文件状态</li><li>git log [option] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看仓库中文件</li><li>options：<ul><li>–all &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 显示所有分支</li><li>–pretty&#x3D;oneline &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 提交信息显示为一行</li><li>–abbrev-commit &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使得输出的commitld更简短</li><li>–graph &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以图的形式显示</li></ul></li><li>git reset –hard commitID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 版本回退<ul><li>commitID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 可以用git log 查看</li></ul></li><li>git reflog &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看已经删除的提交记录</li><li>想让一些文件不被git管理，可以创建.gitignore文件，在里面编辑不要的文件名</li></ul><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul><li>查看本地分支： git branch</li><li>创建本地分支： git branch 分支名</li><li>切换分支： git checkout 分支名</li><li>切换到不存在的分支并创建： git checkout -b 分支名</li><li>合并分支： git merge 分支名（将分支名合并到目前所在分支）</li><li>删除分支： <ul><li>git branch -d 分支名 删除分支时，需要做各种检查</li><li>git branch -D 分支名 不做任何检查，强制删除</li></ul></li></ul><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，需要手动解决冲突，步骤如下：</p><ol><li>处理文件中冲突的地方、</li><li>将解决完冲突的文件加入暂存区（add）</li><li>提交到仓库（commit）</li></ol><h4 id="分支使用流程"><a href="#分支使用流程" class="headerlink" title="分支使用流程"></a>分支使用流程</h4><ul><li>Master</li><li>Develop</li><li>Feature（开发）</li><li>Hotfix（修复bug）</li></ul><h4 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h4><ol><li>   常用的托管服务[远程仓库] github，码云，gitlab<br>- 生成SSH公钥：ssh-keygen-t rsa<br>- 不断回车<br>- 获取公钥：cat -&#x2F;.shh&#x2F;id_rsa.pub<br>- 验证是否配置成功：ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#x6d;</a></li></ol><ul><li>连接远程仓库：git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</li><li>查看远程仓库：git remote</li><li>推送到远程仓库：git push –set-upstream 远端名称 本地分支名:远端分支名</li><li>从远程仓库克隆：git clone &lt;仓库路径&gt;[本地目录]</li><li>从远程仓库抓取（将仓库里的更新都抓取到本地，不会进行合并）：git fetch [remote_name][branch_name]</li><li>从远程仓库拉取（将仓库里的修改拉到本地并自动进行合并，等同于fetch+merge）：git pull [remote_name][branch_name]</li></ul><p>切换分支前先提交本地的修改。</p><h3 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2.Linux"></a>2.Linux</h3><p>Linux系统由 Linux系统内核 和 系统级应用程序组成。</p><ul><li>内核：调度CPU，调度内存，调度文件系统，调度网络通讯，调度IO等</li><li>系统级应用程序：出厂自带程序，可供用户快速上手操作系统</li></ul><p>程序调动内核，内核调动硬件。</p><ul><li>Linux内核免费开源</li><li>Linux系统发行版（在内核之上，封装好系统级应用程序组合起来）</li></ul><p>对操作系统的使用有两种模式：</p><ul><li>图形化：使用操作系统提供的图形化页面</li><li>命令行：使用操作系统提供的各类命令</li></ul><p>Linux大多数使用命令行，效率更高，更加直观，资源占用低，程序运行更加稳定</p><p>Linux的目录结构是一个树型结构</p><p>Linux没有盘符这个概念，只有一个根目录&#x2F;，所有文件都在它下面</p><h4 id="Linux命令基础：命令的同用格式"><a href="#Linux命令基础：命令的同用格式" class="headerlink" title="Linux命令基础：命令的同用格式"></a>Linux命令基础：命令的同用格式</h4><p>command [-options] [parameter]</p><ul><li>command：命令本身</li><li>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</li><li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li></ul><h4 id="ls命令入门"><a href="#ls命令入门" class="headerlink" title="ls命令入门"></a>ls命令入门</h4><p>ls命令的作用是列出目录下的内容，语法如下</p><p>ls [-a -l -h] [Linux路径]</p><ul><li>-a -l -h 是可选的选项</li><li>Linux路径 是此命令可选的参数</li></ul><p>当不使用选项和参数，直接使用ls命令本体，表示：</p><ul><li>以平铺形式，列出当前工作目录下的内容，默认在HOME目录 （&#x2F;home&#x2F;用户名）</li></ul><p>ls命令的参数和选项：</p><ul><li><p>参数：</p><ul><li>不使用参数，表示列出：当前工作目录的内容，即用户的HOME目录</li><li>当使用参数，ls命令的参数表示：列出指定路径的内容</li></ul></li><li><p>选项：</p><ul><li>-a选项，表示：all的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹）（以.开头的是Linux系统的隐藏文件&#x2F;文件夹）</li><li>-l选项，表示：以列表（竖向排序）的形式展示内容，并展示更多信息</li><li>-h选项，表示：以易于阅读的形式，列出文件大小，如K,M,G<ul><li>-h选项必须要搭配-l一起使用</li></ul></li></ul></li><li><p>语法中的选项是可以组合使用的，比如-a和-l可以写为</p><ul><li>ls -l -a</li><li>ls -la  ls -al</li></ul></li></ul><h4 id="目录切换的相关命令（cd-pwd）"><a href="#目录切换的相关命令（cd-pwd）" class="headerlink" title="目录切换的相关命令（cd&#x2F;pwd）"></a>目录切换的相关命令（cd&#x2F;pwd）</h4><p>通过cd命令，更改当前所在的工作目录（Change Directory）</p><ul><li>语法：cd [Linux路径]<ul><li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录<br>通过pwd命令，来查看当前所在的工作目录（Print Work Directory）</li></ul></li><li>语法：pwd<ul><li>pwd命令，无选项，无参数，直接输入pwd即可<br>路径问题</li></ul></li><li>相对路径，绝对路径和特殊路径符</li><li>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以&#x2F;开头</li><li>相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以&#x2F;开头</li><li>特殊路径符<ul><li>.表示当前目录</li><li>..表示上一级目录</li><li>~表示HOME目录</li></ul></li></ul><h4 id="创建目录命令（mkdir）"><a href="#创建目录命令（mkdir）" class="headerlink" title="创建目录命令（mkdir）"></a>创建目录命令（mkdir）</h4><p>通过mkdir命令可以创建新的目录（文件夹）（Make Diretary）</p><ul><li><p>语法：mkdir [-p] Linux路径</p><ul><li>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可。</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录。</li></ul></li><li><p>创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作，涉及到权限问题，HOME外无法成功。</p></li></ul><h4 id="文件操作命令（touch，cat，more，cp，mv，rm）"><a href="#文件操作命令（touch，cat，more，cp，mv，rm）" class="headerlink" title="文件操作命令（touch，cat，more，cp，mv，rm）"></a>文件操作命令（touch，cat，more，cp，mv，rm）</h4><p>通过touch命令创建文件</p><ul><li>语法：touch Linux路径</li><li>touch命令无选项，参数必填，表示要创建的文件路径，相对，绝对，特殊路径符均可以使用</li></ul><p>通过cat查看文件内容</p><ul><li>语法：cat Linux路径</li><li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对，绝对，特殊路径符均可以使用</li></ul><p>通过more命令同样可以查看文件内容，和cat不同的是：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示（通过空格进行翻页，通过q退出查看）</li><li>语法：more Linux路径</li><li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对，绝对，特殊路径符均可以使用</li></ul><p>通过cp命令可以复制文件\文件夹（copy）</p><ul><li>语法：cp [-r] 参数1 参数2<ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件或文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li></ul></li></ul><p>通过mv命令可以移动文件\文件夹（move）</p><ul><li>语法：mv 参数1 参数2<ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在（重命名）</li></ul></li></ul><p>通过rm命令可用于删除文件，文件夹（remove）</p><ul><li>语法：rm [-r -f] 参数1 参数2 …… 参数N<ul><li>同cp命令一样，-r选项用于删除文件夹</li><li>-f表示force，强制删除（不会弹出提示确认信息）</li><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示，所以一般普通用户用不到-f选项</li><li>参数1，参数2，……，参数N表示要删除的文件或文件夹路径，按照空格隔开</li><li>rm命令支持通配符*，用来模糊匹配</li></ul></li><li>可以通过su – root，并输入密码123456临时切换到root用户体验</li><li>通过输入exit命令，退回普通用户。（临时用root，用完记得退出）</li></ul><h4 id="查找命令（which，find）"><a href="#查找命令（which，find）" class="headerlink" title="查找命令（which，find）"></a>查找命令（which，find）</h4><p>通过which命令，查看所使用的一系列命令的程序文件存放在哪里</p><ul><li>语法：which 要查找的命令</li></ul><p>通过find命令搜索指定的文件</p><ul><li>按文件名进行搜索<ul><li>语法：find 起始路径 -name “被查找文件名”</li><li>起始路径：从哪里开始搜索</li><li>被查找文件名，支持使用通配符*来做模糊查询</li></ul></li><li>按文件大小进行搜索<ul><li>语法：find 起始路径 -size +|-n[kMG]</li><li>+，-表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li></ul></li></ul><h4 id="grep，wc和管道符"><a href="#grep，wc和管道符" class="headerlink" title="grep，wc和管道符"></a>grep，wc和管道符</h4><p>通过grep命令，从文件中通过关键字过滤文件行</p><ul><li>语法：grep [-n] 关键字 文件路径<ul><li>选项-n，可选，表示在结果中显示匹配的行的行号</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其他特殊符号建议使用““将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为管道符的输入</li></ul></li></ul><p>通过wc命令统计文件的行数，单词数量等</p><ul><li>语法：wc [-c -m -l -w] 文件路径<ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为管道符的输入</li></ul></li></ul><p>管道符：|</p><ul><li>将管道符左边命令的结果，作为右边命令的输入</li></ul><p>echo,tail和重定向符</p><ul><li>通过echo命令在命令行内输出指定内容</li><li>语法：echo 输出的内容</li><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用““包围</li></ul><p>反引号&#96;</p><ul><li>通过反引号（通常也称之为飘号）&#96;将命令包围，被包围的内容会被作为命令执行，而非普通字符</li></ul><p>重定向符：&gt;和&gt;&gt;</p><ul><li><code>&gt;</code>，将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li><li><code>&gt;&gt;</code>，将左侧命令的结果，追加写入到符号右侧指定的文件中</li></ul><h4 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h4><p>通过tail命令，可以查看文件尾部内容，跟踪文件的最新更改</p><ul><li>语法：tail [-f -num] Linux路径<ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持续跟踪</li><li>选项，-num，表示，查看尾部多少行，不填默写10行</li></ul></li><li>Ctrl+c停止持续跟踪</li></ul><h4 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h4><p>vi\vim是Linux中最经典的文本编辑器</p><p>vi是命令行下对文本文件进行编程的绝佳选择</p><p>vim是vi的加强版本</p><h2 id="三种工作模式：-命令模式：所敲的按键编辑器都理解为命令，以命令驱动执行功能-输入模式：编辑模式，插入模式，可以自由编辑-底线命令模式：开始，通常用于文件的保存，退出"><a href="#三种工作模式：-命令模式：所敲的按键编辑器都理解为命令，以命令驱动执行功能-输入模式：编辑模式，插入模式，可以自由编辑-底线命令模式：开始，通常用于文件的保存，退出" class="headerlink" title="三种工作模式：- 命令模式：所敲的按键编辑器都理解为命令，以命令驱动执行功能- 输入模式：编辑模式，插入模式，可以自由编辑- 底线命令模式：开始，通常用于文件的保存，退出"></a>三种工作模式：<br>- 命令模式：所敲的按键编辑器都理解为命令，以命令驱动执行功能<br>- 输入模式：编辑模式，插入模式，可以自由编辑<br>- 底线命令模式：开始，通常用于文件的保存，退出</h2><p>进入–&gt;命令模式–&gt;输入模式–&gt;命令模式–&gt;底线命令模式–&gt;退出</p><p>&nbsp;&nbsp;&nbsp;&nbsp;vi文件路径 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i键 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ESC键 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wq</p><p>通过vi&#x2F;vim编辑器编辑文件，通过如下命令：</p><ul><li>vi 文件路径</li><li>vim 文件路径</li><li>如果文件路径表示的文件不存在，则编辑新文件</li></ul><p>命令模式：</p><ul><li>I，a，I，A，o，O，esc</li></ul><h3 id="5-Spring-基本原理：IOC、AOP"><a href="#5-Spring-基本原理：IOC、AOP" class="headerlink" title="5.Spring 基本原理：IOC、AOP"></a>5.Spring 基本原理：IOC、AOP</h3><p>Spring IOC，是spring全家桶各个功能模块的基础，创建对象的容器。</p><p>AOP也是以IOC为基础，是面向切面编程，抽象化的面向对象。</p><p>AOP可以：打印日志，操作事务，权限处理</p><h4 id="IOC，控制反转"><a href="#IOC，控制反转" class="headerlink" title="IOC，控制反转"></a>IOC，控制反转</h4><p>将对象的创建进行反转，使用IOC开发者不再需要创建对象，而是由IOC容器根据需求自动创建项目所需要的对象。</p><p>引入依赖spring-context</p><p>基于XML和基于注解两种方式</p><ul><li><p>ApplicationContextClassPathXmlApplicationContextAnnotationConfigApplicationContext.getBean（bean名）</p></li><li><p>基于XML：<br>开发者把需要的对象在XML中进行配置，Spring框架读取这个配置文件，根据配置文件的内容来创建对象</p></li><li><p>基于注解：</p><ul><li><p>配置类</p><ul><li><p>用一个Java类来替代XML文件，把XML中配置的内容放到配置类中 （写到方法里面）</p><pre><code> @Configuration @Bean（value = “xxx“）可以命名，默认为方法名AnnotationConfigApplicationContext（“指定包名“）（整个包下的都读取）</code></pre></li></ul></li><li><p>扫包+注解</p><ul><li><p>更简单的方式，不再需要依赖XML或者配置类，而是直接将bean的创建交给目标类，在目标类添加注解来创建</p><pre><code>类中加注解@ComponentApplicationContextAnnotationConfigApplicationContext（“指定包名“）用@Value（“方式赋值“）</code></pre></li><li><p>自动创建对象，完成依赖注入</p></li><li><p>@Autowired 自动装载，将ioc容器里的内容注入</p></li><li><p>通过类型进行注入（不考虑方法名）,</p></li></ul></li><li><p>如果需要名称取值：</p><ul><li>在下方加入@Qualifier（“名字“） {起名字的注解}</li><li>同时@ Component（”加上名字“）</li></ul></li></ul></li></ul><h4 id="AOP，面向切面编程"><a href="#AOP，面向切面编程" class="headerlink" title="AOP，面向切面编程"></a>AOP，面向切面编程</h4><p>是一种抽象化的面向对象编程，面向对象编程的补充</p><p>底层使用动态代理机制</p><p>引入依赖 spring-aspects</p><p>做到核心业务和非核心业务代码的解耦合。减少重复代码。</p><p>创建切面类</p><p>类上：</p><ul><li>@Component注入IOC容器</li><li>@Aspect声明为切面</li></ul><p>方法上：</p><ul><li>设置参数JoinPoint joinPoint作为目标方法和切面之前的连接点</li><li>获取方法名 joinPoint.getSignature().getName（）；</li><li>获取方法的参数 joinPoint.getArgs()</li><li>@Before(“execution（public 返回类型 全类名）”)<ul><li>在括号里的方法执行之前执行映射</li></ul></li><li>@AfterReturning(“execution（public 返回类型 全类名）”)<ul><li>在括号里的方法执行之后执行映射</li></ul></li><li>@After</li><li>@AfterThrowing</li><li>@Round</li></ul><p>jionPoint得不到运行之后的参数，可以在注解后用</p><ul><li>value &#x3D; “execution（public 返回类型 全类名）” returnning &#x3D; “result”<br>绑定方法中的参数，在切面方法里加上对应变量，如“Object result”</li></ul><p>实现类添加@Component注解</p><ul><li>实现类必须得继承一个接口类</li></ul><h2 id="配置自动扫包，开启自动代理对象-在xml中实现-自动扫包-开启自动生成代理使用-加载IOC容器-AplicationContext-cotext-new-ClassPathXmlApplicationContext-“xxx-xml”-接口类名-bean-Context-getBean-接口类名-class-使用bean执行操作即可"><a href="#配置自动扫包，开启自动代理对象-在xml中实现-自动扫包-开启自动生成代理使用-加载IOC容器-AplicationContext-cotext-new-ClassPathXmlApplicationContext-“xxx-xml”-接口类名-bean-Context-getBean-接口类名-class-使用bean执行操作即可" class="headerlink" title="配置自动扫包，开启自动代理对象- 在xml中实现- 自动扫包- 开启自动生成代理使用- 加载IOC容器- AplicationContext cotext &#x3D; new ClassPathXmlApplicationContext(“xxx.xml”)- 接口类名 bean &#x3D; Context.getBean(接口类名.class)- 使用bean执行操作即可"></a>配置自动扫包，开启自动代理对象<br>- 在xml中实现<br>- 自动扫包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context :component-scan base-package= “包的位置”&gt;&lt;/context&gt;</span><br></pre></td></tr></table></figure><br>- 开启自动生成代理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop :aspectj-autoproxy&gt;&lt;/aop :aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><br>使用<br>- 加载IOC容器<br>- AplicationContext cotext &#x3D; new ClassPathXmlApplicationContext(“xxx.xml”)<br>- 接口类名 bean &#x3D; Context.getBean(接口类名.class)<br>- 使用bean执行操作即可</h2><p>将实现类与切面对象组合成代理对象，再运行代理对象，代理对象的类型是接口</p><p>不能由两个实现类继承这个接口，会报错</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>JSON Web Token，定义了一种简洁的，自包含的格式，用于在通信双方以json数据格式安全传输信息。</p><p>Jwt由三部分组成：（各部分由.隔开）</p><ul><li>Header（头），记录令牌类型，签名算法等。</li><li>Payload(有效载荷)，携带一些自定义信息，默认信息等。</li><li>Signature（签名），防止Token被篡改，确保安全性。（不是Base64编码）</li><li>基于Base64（64个可打印字符A-Z,a-z,0-9,+,&#x2F;,&#x3D;）来进行编码</li></ul><p>前端进行登录请求后，后端生成jwt令牌返回前端，在后续的请求中前端携带jwt令牌传给后端，后端通过统一拦截jwt令牌是否正确来进行放行。</p><p>引入依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br></pre></td></tr></table></figure><p>生成jwt令牌</p><ul><li>通过Jwt.builder（）构建Jwt令牌</li><li>.signWith（）设置数字签名的算法（如HS256）和密钥</li><li>.setClaims（）通过map集合设置自定义的部分（载荷）</li><li>.setExpiration（）设置令牌的有效期（当前时间加+有效期）（毫秒值）</li><li>.compact（）拿到jwt令牌的返回值</li></ul><p>解析jwt令牌</p><ul><li>Jwt.parser()</li><li>.setSigningKey(签名密钥)指定签名密钥</li><li>.parseClaimsJws（将解析的jwt令牌传递进来）</li><li>.getBody（）拿到自定义的部分返回类型为claims</li></ul><h3 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h3><p>可以完成：登录校验，统一编码处理，敏感字符处理</p><p>前端请求发送后，先执行放行前逻辑，校验后执行放行，后端程序开始执行，后端程序完成后返回filter执行放行后逻辑，最后响应回前端</p><p>过滤器链</p><p>前端-&gt;过滤器1-&gt;过滤器2-&gt;后端-&gt;过滤器2-&gt;过滤器1-&gt;前端</p><p>在filter层中创建一个filter类，在这里进行放行判断逻辑与操作和jwt令牌的校验</p><p>然后config中创建一个FilterRegistrationBean<LoginCheckFilter>对象，泛型为filter层中的对象，进行filter的配置，并设置过滤路径。</LoginCheckFilter></p><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><p>创建一个统一异常类，再创建一个异常捕捉类</p><p>捕捉类将try catch抛出的统一异常捕捉，将其包装成统一返回类，实现异常返回的统一，便于前端的处理。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先指出不足之处，关于从网上搜索到的Spring AOP的方法，我并没有使用过，因此对于AOP的理解确实不够深入。</p><p>通过这次项目最大的收获就是SpringMVC架构，通过一层层之间的合作，完成了项目要求，还降低了耦合度。</p><p>其次就是对于数据库的设计进行了思考，和通过mybatis将spring和mysql语句进行了映射连接。</p><p>最后关于linux和git的使用也有了基础了解。</p><p>也学会了jwt，token进行身份验证，swagger生成接口文档等许多实用的东西。</p><p>学的东西很多很杂，做项目的途中很艰难，一个技术卡了几天，一个教程做到最后报错了全部报废也是常有的事。各种不知名的bug，没有系统的学习方法，真的很困难。但是有句话说的好：</p><ul><li>山重水复疑无路，柳暗花明又一村</li></ul><p>当慢慢长夜过去，迎来的终是黎明……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次技术分享会</title>
      <link href="/2024/03/21/conference/"/>
      <url>/2024/03/21/conference/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次技术分享会"><a href="#第一次技术分享会" class="headerlink" title="第一次技术分享会"></a>第一次技术分享会</h1><h2 id="1-Idea与github连接并且推送到远程仓库"><a href="#1-Idea与github连接并且推送到远程仓库" class="headerlink" title="1 Idea与github连接并且推送到远程仓库"></a>1 Idea与github连接并且推送到远程仓库</h2><p>（前提是已加入本地仓库）</p><h3 id="1-科学上网"><a href="#1-科学上网" class="headerlink" title="1.科学上网"></a>1.科学上网</h3><h3 id="2-从idea关联github账号"><a href="#2-从idea关联github账号" class="headerlink" title="2.从idea关联github账号"></a>2.从idea关联github账号</h3><ul><li>1.获取token</li></ul><p>github中developer settings中获取token（class）<br>权限要给高点，并且及时保存token（可以保存在txt文件中），刷新会消失<br><img src="/2024/03/21/conference/img.png" alt="img.png"><br><img src="/2024/03/21/conference/img_1.png" alt="img_1.png"><br><img src="/2024/03/21/conference/img_2.png" alt="img_2.png"></p><ul><li>2.关联github账号</li></ul><p>idea中file–&gt;setting–&gt;version control–&gt;github中的加号，并把token填进去<br><img src="/2024/03/21/conference/img_3.png" alt="img_3.png"></p><h3 id="3-将项目直接设置为github上的仓库。"><a href="#3-将项目直接设置为github上的仓库。" class="headerlink" title="3.将项目直接设置为github上的仓库。"></a>3.将项目直接设置为github上的仓库。</h3><p><img src="/2024/03/21/conference/img_14.png" alt="img_14.png"></p><h3 id="4-将项目推送到远程仓库"><a href="#4-将项目推送到远程仓库" class="headerlink" title="4.将项目推送到远程仓库"></a>4.将项目推送到远程仓库</h3><p><img src="/2024/03/21/conference/img_4.png" alt="img_4.png"></p><h2 id="2-springboot项目的远程部署到阿里云服务器上"><a href="#2-springboot项目的远程部署到阿里云服务器上" class="headerlink" title="2 springboot项目的远程部署到阿里云服务器上"></a>2 springboot项目的远程部署到阿里云服务器上</h2><p><a href="https://blog.csdn.net/Mou_Yang/article/details/102137861?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171076031716800188578481%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171076031716800188578481&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-102137861-null-null.142%5Ev99%5Epc_search_result_base4&utm_term=%E6%8A%8Aspringboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A&spm=1018.2226.3001.4187">参考文献</a></p><h4 id="1-注册阿里云服务器"><a href="#1-注册阿里云服务器" class="headerlink" title="1.注册阿里云服务器"></a>1.注册阿里云服务器</h4><p>免费试用3个月</p><h4 id="2-使用Xshell连接服务器"><a href="#2-使用Xshell连接服务器" class="headerlink" title="2.使用Xshell连接服务器"></a>2.使用Xshell连接服务器</h4><h4 id="3-搭建java环境，安装mysql"><a href="#3-搭建java环境，安装mysql" class="headerlink" title="3.搭建java环境，安装mysql"></a>3.搭建java环境，安装mysql</h4><h4 id="4-idea导出jar包"><a href="#4-idea导出jar包" class="headerlink" title="4.idea导出jar包"></a>4.idea导出jar包</h4><h4 id="5-虚拟机接收jar包并启动"><a href="#5-虚拟机接收jar包并启动" class="headerlink" title="5.虚拟机接收jar包并启动"></a>5.虚拟机接收jar包并启动</h4><p>具体操作参考文献中都十分详细，我就说说我自己遇到得问题及解决方法吧</p><h4 id="1-使用rz命令传输文件报错"><a href="#1-使用rz命令传输文件报错" class="headerlink" title="1.使用rz命令传输文件报错"></a>1.使用rz命令传输文件报错</h4><p>直接在Xshell连接后得黑框中右键，选择传输ZMODEM形式<br><img src="/2024/03/21/conference/img_5.png" alt="img_5.png"></p><h4 id="2-使用vim编辑profile文件时csdn描述按键错误"><a href="#2-使用vim编辑profile文件时csdn描述按键错误" class="headerlink" title="2.使用vim编辑profile文件时csdn描述按键错误"></a>2.使用vim编辑profile文件时csdn描述按键错误</h4><p><img src="/2024/03/21/conference/img_6.png" alt="img_6.png"><br>按 i 进入编辑模式</p><h4 id="3-安装-mariadb报错"><a href="#3-安装-mariadb报错" class="headerlink" title="3.安装 mariadb报错"></a>3.安装 mariadb报错</h4><p>直接跳过，应该是linux系统版本不同，我的是Alibaba Cloud Linux 3.2104 LTS 64位，<br>可以直接启动mysql</p><h4 id="4，更改mysql中root用户密码报错"><a href="#4，更改mysql中root用户密码报错" class="headerlink" title="4，更改mysql中root用户密码报错"></a>4，更改mysql中root用户密码报错</h4><p><img src="/2024/03/21/conference/img_9.png" alt="img_9.png"><br>教程中的mysql版本太低<br>在新版的 MySQL 中，password() 函数已经被弃用，取而代之的是使用 ALTER USER 命令来设置密码。</p><p>可以使用 ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘123456’; 来修改密码。</p><h4 id="4-运行jar包报错"><a href="#4-运行jar包报错" class="headerlink" title="4.运行jar包报错"></a>4.运行jar包报错</h4><p><img src="/2024/03/21/conference/img_7.png" alt="img_7.png"><br>Linux和idea编译器jdk不同，修改idea得jdk版本<br>修改后重新上传jar包运行还是报错<br><img src="/2024/03/21/conference/img_8.png" alt="img_8.png"><br>试图连接到 MySQL 数据库时遇到了访问被拒绝的问题。具体来说，是因为使用了错误的用户名或密码尝试连接到本地的 MySQL 数据库。</p><p>更改Linux上得用户名和密码</p><p>紧接着又报错<br><img src="/2024/03/21/conference/img_10.png" alt="img_10.png"><br>原因是找不到名为password_base的数据库，即我本地的数据库没有上传到服务器上</p><p>解决方法<a href="https://blog.csdn.net/ravenYoung/article/details/125320412?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%80%8E%E4%B9%88%E6%8A%8A%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%A0%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125320412.142%5Ev99%5Epc_search_result_base4&spm=1018.2226.3001.4187">参考文献</a><br>可以通过直接rz上传避免下载Xftp，方法同上</p><p>同时要在服务器上把防火墙端口打开</p><p>最后部署成功<br><img src="/2024/03/21/conference/img_11.png" alt="img_11.png"><br><img src="/2024/03/21/conference/img_12.png" alt="img_12.png"><br>接口测试也成功了<br><img src="/2024/03/21/conference/img_13.png" alt="img_13.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
